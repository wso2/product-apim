<%

var manageAPI = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.manageAPI(api);
        if (log.isDebugEnabled()) {
            log.debug("manageAPI : " + api.name + "-" + api.version);
        }
        if(success){
        return {
            error:false
        };
        }else{
        return {
            error:true
        }; }
    } catch (e) {
        log.error(e);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var checkIfResourceExists = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.checkIfResourceExists(api);
        if (log.isDebugEnabled()) {
            log.debug("checkIfResourceExists : " + api.name + "-" + api.version);
        }
        return success;
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var updateAPIImplementation = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.updateAPIImplementation(api);
        if (log.isDebugEnabled()) {
            log.debug("updateAPIImplementation : " + api.name + "-" + api.version);
        }
        if(success){
        return {
            error:false
        };
        }else{
        return {
            error:true
        }; }
    } catch (e) {
        log.error(e);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var getSwagger12Resource = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.getSwagger12Resource(api);
        if (log.isDebugEnabled()) {
            log.debug("getSwagger12Resource : " + api.name + "-" + api.version);
        }
        return success;        
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var createAPI = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.createAPI(api);

        if (log.isDebugEnabled()) {
            log.debug("createAPI : " + api.name + "-" + api.version);
        }
        if(success){
        return {
            error:false
        };
        }else{
        return {
            error:true
        }; }
    } catch (e) {
        log.error(e);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var updateAPIDesign = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.updateAPIDesign(api);
        if (log.isDebugEnabled()) {
            log.debug("updateAPIDesign : " + api.name + "-" + api.version);
        }
        if(success){
        return {
            error:false
        };
        }else{
        return {
            error:true
        }; }
    } catch (e) {
        log.error(e);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var addAPI = function (api) {
    var success, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        success = provider.addAPI(api);
        if (log.isDebugEnabled()) {
            log.debug("addAPI : " + api.name + "-" + api.version);
        }
        if(success){
            return {
                error:false
            };
        } else  {
            return {
                error:true
            };
        }
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
            message:e.message.split(":")[1]
        };
    }
};

var isContextExist = function (context,oldContext) {
    var exists, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        exists = provider.isContextExist(context,oldContext);
        if (log.isDebugEnabled()) {
            log.debug("isContext exist for : " + context + " : " + exists);
        }
        return {
            error:false,
            exist:exists
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e
        };
    }
};

var isApiNameExist = function (apiName) {
        var exists, log = new Log(),
        provider = jagg.module("manager").getAPIProviderObj();
        try {
        exists = provider.isApiNameExist(apiName);
        if (log.isDebugEnabled()) {
        log.debug("isApiName exist for : " + apiName + " : " + exists);
        }
return {
        error:false,
        exist:exists
        };
} catch (e) {
        log.error(e.message);
        return {
        error:e
        };
}
};

var isURLValid = function (type,url) {
    var result, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        result = provider.isURLValid(type,url);
        if (log.isDebugEnabled()) {
            log.debug("Invoke isURLValid" );
        }
        return {
            error:false,
            response:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e
        };
    }
};

var getTiers = function () {
    var tier,tiers,list=[],log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        tiers = provider.getTiers();
        if (log.isDebugEnabled()) {
            log.debug("getTiers " +  " : " + tiers);
        }


        return {
            error:false,
            tiers:tiers
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            tiers:null
        };
    }
};

var validateRoles = function(roles,username) {
    var validRole, log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        validRole = provider.validateRoles(roles,username);
        if (log.isDebugEnabled()) {
            log.debug("Invoke validateRoles function.");
        }
        return {
            error:false,
            valid: validRole
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e
        };
    }
};

var getCustomInSequences = function () {
    var sequence,sequences,list=[],log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
    	sequences = provider.getCustomInSequences();
        if (log.isDebugEnabled()) {
            log.debug("getCustomInSequences " +  " : " + sequences);
        }
     
        return {
            error:false,
            sequences:sequences
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            sequences:null
        };
    }
};

var getCustomOutSequences = function () {
    var sequence,sequences,list=[],log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
    	sequences = provider.getCustomOutSequences();
        if (log.isDebugEnabled()) {
            log.debug("getCustomOutSequences " +  " : " + sequences);
        }
     
        return {
            error:false,
            sequences:sequences
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            sequences:null
        };
    }
};

var getCustomFaultSequences = function () {
    var sequence,sequences,list=[],log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
    	sequences = provider.getCustomFaultSequences();
        if (log.isDebugEnabled()) {
            log.debug("getCustomFaultSequences " +  " : " + sequences);
        }

        return {
            error:false,
            sequences:sequences
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e,
            sequences:null
        };
    }
};

var isSynapseGateway = function () {
    var result, isSynapseGateway,log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        result = provider.isSynapseGateway();
        if (log.isDebugEnabled()) {
            log.debug("Invoke getExternalAPIStores()" );
        }
        return {
            error:false,
            isSynapseGateway:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e
        };
    }
};

var isDataPublishingEnabled = function () {
    var result, isDataPublishingEnabled,log = new Log(),
            provider = jagg.module("manager").getAPIProviderObj();
    try {
        result = provider.isDataPublishingEnabled();
        if (log.isDebugEnabled()) {
            log.debug("Invoke isDataPublishingEnabled()" );
        }
        return {
            error:false,
            isDataPublishingEnabled:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:e
        };
    }
};


var isMultipleTenantsAvailable = function(){
    var result, status ,log = new Log(),
    provider = jagg.module("manager").getAPIProviderObj();
    try {
        result = provider.isMultipleTenantsAvailable();       
	if (log.isDebugEnabled()) {
            log.debug("Invoke isMultipleTenantsAvailable()" );
        }
        return {
            error:false,
            status:result
        };
    } catch (e) {
        log.error(e.message);
        return {
            error:true,
	    message:e
        };
    }
};
%>
