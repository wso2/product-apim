/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication Our REST APIs are protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<gateway_port>/token ``` **Sample request** ``` curl https://localhost:8243/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v2
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiCallback;
import org.wso2.am.integration.clients.publisher.api.ApiClient;
import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.ApiResponse;
import org.wso2.am.integration.clients.publisher.api.Configuration;
import org.wso2.am.integration.clients.publisher.api.Pair;
import org.wso2.am.integration.clients.publisher.api.ProgressRequestBody;
import org.wso2.am.integration.clients.publisher.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportExportApi {
    private ApiClient localVarApiClient;

    public ImportExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for exportAPI
     * @param apiId UUID of the API (optional)
     * @param name API Name  (optional)
     * @param version Version of the API  (optional)
     * @param revisionNumber Revision number of the API artifact  (optional)
     * @param providerName Provider name of the API  (optional)
     * @param format Format of output documents. Can be YAML or JSON.  (optional)
     * @param preserveStatus Preserve API Status on export  (optional)
     * @param latestRevision Export the latest revision of the API  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Export Successful.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAPICall(String apiId, String name, String version, String revisionNumber, String providerName, String format, Boolean preserveStatus, Boolean latestRevision, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiId", apiId));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (revisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionNumber", revisionNumber));
        }

        if (providerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providerName", providerName));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (preserveStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preserveStatus", preserveStatus));
        }

        if (latestRevision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestRevision", latestRevision));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/zip", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportAPIValidateBeforeCall(String apiId, String name, String version, String revisionNumber, String providerName, String format, Boolean preserveStatus, Boolean latestRevision, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = exportAPICall(apiId, name, version, revisionNumber, providerName, format, preserveStatus, latestRevision, _callback);
        return localVarCall;

    }

    /**
     * Export an API
     * This operation can be used to export the details of a particular API as a zip file. 
     * @param apiId UUID of the API (optional)
     * @param name API Name  (optional)
     * @param version Version of the API  (optional)
     * @param revisionNumber Revision number of the API artifact  (optional)
     * @param providerName Provider name of the API  (optional)
     * @param format Format of output documents. Can be YAML or JSON.  (optional)
     * @param preserveStatus Preserve API Status on export  (optional)
     * @param latestRevision Export the latest revision of the API  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Export Successful.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public File exportAPI(String apiId, String name, String version, String revisionNumber, String providerName, String format, Boolean preserveStatus, Boolean latestRevision) throws ApiException {
        ApiResponse<File> localVarResp = exportAPIWithHttpInfo(apiId, name, version, revisionNumber, providerName, format, preserveStatus, latestRevision);
        return localVarResp.getData();
    }

    /**
     * Export an API
     * This operation can be used to export the details of a particular API as a zip file. 
     * @param apiId UUID of the API (optional)
     * @param name API Name  (optional)
     * @param version Version of the API  (optional)
     * @param revisionNumber Revision number of the API artifact  (optional)
     * @param providerName Provider name of the API  (optional)
     * @param format Format of output documents. Can be YAML or JSON.  (optional)
     * @param preserveStatus Preserve API Status on export  (optional)
     * @param latestRevision Export the latest revision of the API  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Export Successful.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportAPIWithHttpInfo(String apiId, String name, String version, String revisionNumber, String providerName, String format, Boolean preserveStatus, Boolean latestRevision) throws ApiException {
        okhttp3.Call localVarCall = exportAPIValidateBeforeCall(apiId, name, version, revisionNumber, providerName, format, preserveStatus, latestRevision, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export an API (asynchronously)
     * This operation can be used to export the details of a particular API as a zip file. 
     * @param apiId UUID of the API (optional)
     * @param name API Name  (optional)
     * @param version Version of the API  (optional)
     * @param revisionNumber Revision number of the API artifact  (optional)
     * @param providerName Provider name of the API  (optional)
     * @param format Format of output documents. Can be YAML or JSON.  (optional)
     * @param preserveStatus Preserve API Status on export  (optional)
     * @param latestRevision Export the latest revision of the API  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Export Successful.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAPIAsync(String apiId, String name, String version, String revisionNumber, String providerName, String format, Boolean preserveStatus, Boolean latestRevision, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportAPIValidateBeforeCall(apiId, name, version, revisionNumber, providerName, format, preserveStatus, latestRevision, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportAPIProduct
     * @param name API Product Name  (optional)
     * @param version Version of the API Product  (optional)
     * @param providerName Provider name of the API Product  (optional)
     * @param revisionNumber Revision number of the API Product  (optional)
     * @param format Format of output documents. Can be YAML or JSON.  (optional)
     * @param preserveStatus Preserve API Product Status on export  (optional)
     * @param latestRevision Export the latest revision of the API Product  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Export Successful.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAPIProductCall(String name, String version, String providerName, String revisionNumber, String format, Boolean preserveStatus, Boolean latestRevision, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-products/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (providerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("providerName", providerName));
        }

        if (revisionNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionNumber", revisionNumber));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (preserveStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preserveStatus", preserveStatus));
        }

        if (latestRevision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latestRevision", latestRevision));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/zip", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportAPIProductValidateBeforeCall(String name, String version, String providerName, String revisionNumber, String format, Boolean preserveStatus, Boolean latestRevision, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = exportAPIProductCall(name, version, providerName, revisionNumber, format, preserveStatus, latestRevision, _callback);
        return localVarCall;

    }

    /**
     * Export an API Product
     * This operation can be used to export the details of a particular API Product as a zip file. 
     * @param name API Product Name  (optional)
     * @param version Version of the API Product  (optional)
     * @param providerName Provider name of the API Product  (optional)
     * @param revisionNumber Revision number of the API Product  (optional)
     * @param format Format of output documents. Can be YAML or JSON.  (optional)
     * @param preserveStatus Preserve API Product Status on export  (optional)
     * @param latestRevision Export the latest revision of the API Product  (optional, default to false)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Export Successful.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public File exportAPIProduct(String name, String version, String providerName, String revisionNumber, String format, Boolean preserveStatus, Boolean latestRevision) throws ApiException {
        ApiResponse<File> localVarResp = exportAPIProductWithHttpInfo(name, version, providerName, revisionNumber, format, preserveStatus, latestRevision);
        return localVarResp.getData();
    }

    /**
     * Export an API Product
     * This operation can be used to export the details of a particular API Product as a zip file. 
     * @param name API Product Name  (optional)
     * @param version Version of the API Product  (optional)
     * @param providerName Provider name of the API Product  (optional)
     * @param revisionNumber Revision number of the API Product  (optional)
     * @param format Format of output documents. Can be YAML or JSON.  (optional)
     * @param preserveStatus Preserve API Product Status on export  (optional)
     * @param latestRevision Export the latest revision of the API Product  (optional, default to false)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Export Successful.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> exportAPIProductWithHttpInfo(String name, String version, String providerName, String revisionNumber, String format, Boolean preserveStatus, Boolean latestRevision) throws ApiException {
        okhttp3.Call localVarCall = exportAPIProductValidateBeforeCall(name, version, providerName, revisionNumber, format, preserveStatus, latestRevision, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export an API Product (asynchronously)
     * This operation can be used to export the details of a particular API Product as a zip file. 
     * @param name API Product Name  (optional)
     * @param version Version of the API Product  (optional)
     * @param providerName Provider name of the API Product  (optional)
     * @param revisionNumber Revision number of the API Product  (optional)
     * @param format Format of output documents. Can be YAML or JSON.  (optional)
     * @param preserveStatus Preserve API Product Status on export  (optional)
     * @param latestRevision Export the latest revision of the API Product  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Export Successful.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportAPIProductAsync(String name, String version, String providerName, String revisionNumber, String format, Boolean preserveStatus, Boolean latestRevision, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportAPIProductValidateBeforeCall(name, version, providerName, revisionNumber, format, preserveStatus, latestRevision, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importAPI
     * @param file Zip archive consisting on exported api configuration (required)
     * @param preserveProvider Preserve Original Provider of the API. This is the user choice to keep or replace the API provider  (optional)
     * @param rotateRevision Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision  (optional)
     * @param overwrite Whether to update the API or not. This is used when updating already existing APIs  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. API Imported Successfully.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Specified resource already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importAPICall(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean overwrite, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (preserveProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preserveProvider", preserveProvider));
        }

        if (rotateRevision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rotateRevision", rotateRevision));
        }

        if (overwrite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overwrite", overwrite));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importAPIValidateBeforeCall(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean overwrite, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling importAPI(Async)");
        }
        

        okhttp3.Call localVarCall = importAPICall(file, preserveProvider, rotateRevision, overwrite, _callback);
        return localVarCall;

    }

    /**
     * Import an API
     * This operation can be used to import an API. 
     * @param file Zip archive consisting on exported api configuration (required)
     * @param preserveProvider Preserve Original Provider of the API. This is the user choice to keep or replace the API provider  (optional)
     * @param rotateRevision Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision  (optional)
     * @param overwrite Whether to update the API or not. This is used when updating already existing APIs  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. API Imported Successfully.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Specified resource already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public void importAPI(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean overwrite) throws ApiException {
        importAPIWithHttpInfo(file, preserveProvider, rotateRevision, overwrite);
    }

    /**
     * Import an API
     * This operation can be used to import an API. 
     * @param file Zip archive consisting on exported api configuration (required)
     * @param preserveProvider Preserve Original Provider of the API. This is the user choice to keep or replace the API provider  (optional)
     * @param rotateRevision Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision  (optional)
     * @param overwrite Whether to update the API or not. This is used when updating already existing APIs  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. API Imported Successfully.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Specified resource already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importAPIWithHttpInfo(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean overwrite) throws ApiException {
        okhttp3.Call localVarCall = importAPIValidateBeforeCall(file, preserveProvider, rotateRevision, overwrite, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import an API (asynchronously)
     * This operation can be used to import an API. 
     * @param file Zip archive consisting on exported api configuration (required)
     * @param preserveProvider Preserve Original Provider of the API. This is the user choice to keep or replace the API provider  (optional)
     * @param rotateRevision Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision  (optional)
     * @param overwrite Whether to update the API or not. This is used when updating already existing APIs  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. API Imported Successfully.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Specified resource already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importAPIAsync(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean overwrite, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importAPIValidateBeforeCall(file, preserveProvider, rotateRevision, overwrite, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for importAPIProduct
     * @param file Zip archive consisting on exported API Product configuration  (required)
     * @param preserveProvider Preserve Original Provider of the API Product. This is the user choice to keep or replace the API Product provider  (optional)
     * @param rotateRevision Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision  (optional)
     * @param importAPIs Whether to import the dependent APIs or not.  (optional)
     * @param overwriteAPIProduct Whether to update the API Product or not. This is used when updating already existing API Products.  (optional)
     * @param overwriteAPIs Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. API Product Imported Successfully.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Specified resource already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importAPIProductCall(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean importAPIs, Boolean overwriteAPIProduct, Boolean overwriteAPIs, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-products/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (preserveProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preserveProvider", preserveProvider));
        }

        if (rotateRevision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rotateRevision", rotateRevision));
        }

        if (importAPIs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("importAPIs", importAPIs));
        }

        if (overwriteAPIProduct != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overwriteAPIProduct", overwriteAPIProduct));
        }

        if (overwriteAPIs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overwriteAPIs", overwriteAPIs));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importAPIProductValidateBeforeCall(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean importAPIs, Boolean overwriteAPIProduct, Boolean overwriteAPIs, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling importAPIProduct(Async)");
        }
        

        okhttp3.Call localVarCall = importAPIProductCall(file, preserveProvider, rotateRevision, importAPIs, overwriteAPIProduct, overwriteAPIs, _callback);
        return localVarCall;

    }

    /**
     * Import an API Product
     * This operation can be used to import an API Product. 
     * @param file Zip archive consisting on exported API Product configuration  (required)
     * @param preserveProvider Preserve Original Provider of the API Product. This is the user choice to keep or replace the API Product provider  (optional)
     * @param rotateRevision Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision  (optional)
     * @param importAPIs Whether to import the dependent APIs or not.  (optional)
     * @param overwriteAPIProduct Whether to update the API Product or not. This is used when updating already existing API Products.  (optional)
     * @param overwriteAPIs Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. API Product Imported Successfully.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Specified resource already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public void importAPIProduct(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean importAPIs, Boolean overwriteAPIProduct, Boolean overwriteAPIs) throws ApiException {
        importAPIProductWithHttpInfo(file, preserveProvider, rotateRevision, importAPIs, overwriteAPIProduct, overwriteAPIs);
    }

    /**
     * Import an API Product
     * This operation can be used to import an API Product. 
     * @param file Zip archive consisting on exported API Product configuration  (required)
     * @param preserveProvider Preserve Original Provider of the API Product. This is the user choice to keep or replace the API Product provider  (optional)
     * @param rotateRevision Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision  (optional)
     * @param importAPIs Whether to import the dependent APIs or not.  (optional)
     * @param overwriteAPIProduct Whether to update the API Product or not. This is used when updating already existing API Products.  (optional)
     * @param overwriteAPIs Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. API Product Imported Successfully.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Specified resource already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> importAPIProductWithHttpInfo(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean importAPIs, Boolean overwriteAPIProduct, Boolean overwriteAPIs) throws ApiException {
        okhttp3.Call localVarCall = importAPIProductValidateBeforeCall(file, preserveProvider, rotateRevision, importAPIs, overwriteAPIProduct, overwriteAPIs, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import an API Product (asynchronously)
     * This operation can be used to import an API Product. 
     * @param file Zip archive consisting on exported API Product configuration  (required)
     * @param preserveProvider Preserve Original Provider of the API Product. This is the user choice to keep or replace the API Product provider  (optional)
     * @param rotateRevision Once the revision max limit reached, undeploy and delete the earliest revision and create a new revision  (optional)
     * @param importAPIs Whether to import the dependent APIs or not.  (optional)
     * @param overwriteAPIProduct Whether to update the API Product or not. This is used when updating already existing API Products.  (optional)
     * @param overwriteAPIs Whether to update the dependent APIs or not. This is used when updating already existing dependent APIs of an API Product.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created. API Product Imported Successfully.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Specified resource already exists. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call importAPIProductAsync(File file, Boolean preserveProvider, Boolean rotateRevision, Boolean importAPIs, Boolean overwriteAPIProduct, Boolean overwriteAPIs, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = importAPIProductValidateBeforeCall(file, preserveProvider, rotateRevision, importAPIs, overwriteAPIProduct, overwriteAPIs, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
