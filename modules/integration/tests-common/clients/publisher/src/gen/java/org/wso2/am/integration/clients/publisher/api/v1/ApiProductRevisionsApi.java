/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication Our REST APIs are protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<gateway_port>/token ``` **Sample request** ``` curl https://localhost:8243/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v2
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiCallback;
import org.wso2.am.integration.clients.publisher.api.ApiClient;
import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.ApiResponse;
import org.wso2.am.integration.clients.publisher.api.Configuration;
import org.wso2.am.integration.clients.publisher.api.Pair;
import org.wso2.am.integration.clients.publisher.api.ProgressRequestBody;
import org.wso2.am.integration.clients.publisher.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.publisher.api.v1.dto.APIProductDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDeploymentDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionDeploymentListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.APIRevisionListDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiProductRevisionsApi {
    private ApiClient localVarApiClient;

    public ApiProductRevisionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiProductRevisionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createAPIProductRevision
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param apIRevisionDTO API Product object that needs to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created APIRevision object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAPIProductRevisionCall(String apiProductId, APIRevisionDTO apIRevisionDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apIRevisionDTO;

        // create path and map variables
        String localVarPath = "/api-products/{apiProductId}/revisions"
            .replaceAll("\\{" + "apiProductId" + "\\}", localVarApiClient.escapeString(apiProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAPIProductRevisionValidateBeforeCall(String apiProductId, APIRevisionDTO apIRevisionDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiProductId' is set
        if (apiProductId == null) {
            throw new ApiException("Missing the required parameter 'apiProductId' when calling createAPIProductRevision(Async)");
        }
        

        okhttp3.Call localVarCall = createAPIProductRevisionCall(apiProductId, apIRevisionDTO, _callback);
        return localVarCall;

    }

    /**
     * Create a new API Product revision
     * Create a new API Product revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param apIRevisionDTO API Product object that needs to be added (optional)
     * @return APIRevisionDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created APIRevision object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionDTO createAPIProductRevision(String apiProductId, APIRevisionDTO apIRevisionDTO) throws ApiException {
        ApiResponse<APIRevisionDTO> localVarResp = createAPIProductRevisionWithHttpInfo(apiProductId, apIRevisionDTO);
        return localVarResp.getData();
    }

    /**
     * Create a new API Product revision
     * Create a new API Product revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param apIRevisionDTO API Product object that needs to be added (optional)
     * @return ApiResponse&lt;APIRevisionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created APIRevision object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionDTO> createAPIProductRevisionWithHttpInfo(String apiProductId, APIRevisionDTO apIRevisionDTO) throws ApiException {
        okhttp3.Call localVarCall = createAPIProductRevisionValidateBeforeCall(apiProductId, apIRevisionDTO, null);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new API Product revision (asynchronously)
     * Create a new API Product revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param apIRevisionDTO API Product object that needs to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created APIRevision object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAPIProductRevisionAsync(String apiProductId, APIRevisionDTO apIRevisionDTO, final ApiCallback<APIRevisionDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAPIProductRevisionValidateBeforeCall(apiProductId, apIRevisionDTO, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAPIProductRevision
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of remaining API revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Successfully deleted the revision  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAPIProductRevisionCall(String apiProductId, String revisionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-products/{apiProductId}/revisions/{revisionId}"
            .replaceAll("\\{" + "apiProductId" + "\\}", localVarApiClient.escapeString(apiProductId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", localVarApiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAPIProductRevisionValidateBeforeCall(String apiProductId, String revisionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiProductId' is set
        if (apiProductId == null) {
            throw new ApiException("Missing the required parameter 'apiProductId' when calling deleteAPIProductRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling deleteAPIProductRevision(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAPIProductRevisionCall(apiProductId, revisionId, _callback);
        return localVarCall;

    }

    /**
     * Delete a revision of an API Product
     * Delete a revision of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return APIRevisionListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of remaining API revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Successfully deleted the revision  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionListDTO deleteAPIProductRevision(String apiProductId, String revisionId) throws ApiException {
        ApiResponse<APIRevisionListDTO> localVarResp = deleteAPIProductRevisionWithHttpInfo(apiProductId, revisionId);
        return localVarResp.getData();
    }

    /**
     * Delete a revision of an API Product
     * Delete a revision of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return ApiResponse&lt;APIRevisionListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of remaining API revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Successfully deleted the revision  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionListDTO> deleteAPIProductRevisionWithHttpInfo(String apiProductId, String revisionId) throws ApiException {
        okhttp3.Call localVarCall = deleteAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, null);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a revision of an API Product (asynchronously)
     * Delete a revision of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of remaining API revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. Successfully deleted the revision  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAPIProductRevisionAsync(String apiProductId, String revisionId, final ApiCallback<APIRevisionListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deployAPIProductRevision
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly deployed APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployAPIProductRevisionCall(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apIRevisionDeploymentDTO;

        // create path and map variables
        String localVarPath = "/api-products/{apiProductId}/deploy-revision"
            .replaceAll("\\{" + "apiProductId" + "\\}", localVarApiClient.escapeString(apiProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionId", revisionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deployAPIProductRevisionValidateBeforeCall(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiProductId' is set
        if (apiProductId == null) {
            throw new ApiException("Missing the required parameter 'apiProductId' when calling deployAPIProductRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling deployAPIProductRevision(Async)");
        }
        

        okhttp3.Call localVarCall = deployAPIProductRevisionCall(apiProductId, revisionId, apIRevisionDeploymentDTO, _callback);
        return localVarCall;

    }

    /**
     * Deploy a revision
     * Deploy a revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly deployed APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void deployAPIProductRevision(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO) throws ApiException {
        deployAPIProductRevisionWithHttpInfo(apiProductId, revisionId, apIRevisionDeploymentDTO);
    }

    /**
     * Deploy a revision
     * Deploy a revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly deployed APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deployAPIProductRevisionWithHttpInfo(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO) throws ApiException {
        okhttp3.Call localVarCall = deployAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, apIRevisionDeploymentDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deploy a revision (asynchronously)
     * Deploy a revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly deployed APIRevisionDeployment List object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deployAPIProductRevisionAsync(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deployAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, apIRevisionDeploymentDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAPIProductRevision
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An API revision is returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPIProductRevisionCall(String apiProductId, String revisionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-products/{apiProductId}/revisions/{revisionId}"
            .replaceAll("\\{" + "apiProductId" + "\\}", localVarApiClient.escapeString(apiProductId.toString()))
            .replaceAll("\\{" + "revisionId" + "\\}", localVarApiClient.escapeString(revisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAPIProductRevisionValidateBeforeCall(String apiProductId, String revisionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiProductId' is set
        if (apiProductId == null) {
            throw new ApiException("Missing the required parameter 'apiProductId' when calling getAPIProductRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling getAPIProductRevision(Async)");
        }
        

        okhttp3.Call localVarCall = getAPIProductRevisionCall(apiProductId, revisionId, _callback);
        return localVarCall;

    }

    /**
     * Retrieve a revision of an API Product
     * Retrieve a revision of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return APIRevisionDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An API revision is returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionDTO getAPIProductRevision(String apiProductId, String revisionId) throws ApiException {
        ApiResponse<APIRevisionDTO> localVarResp = getAPIProductRevisionWithHttpInfo(apiProductId, revisionId);
        return localVarResp.getData();
    }

    /**
     * Retrieve a revision of an API Product
     * Retrieve a revision of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return ApiResponse&lt;APIRevisionDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An API revision is returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionDTO> getAPIProductRevisionWithHttpInfo(String apiProductId, String revisionId) throws ApiException {
        okhttp3.Call localVarCall = getAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, null);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a revision of an API Product (asynchronously)
     * Retrieve a revision of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. An API revision is returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPIProductRevisionAsync(String apiProductId, String revisionId, final ApiCallback<APIRevisionDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAPIProductRevisionDeployments
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of deployed revision deployment details are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPIProductRevisionDeploymentsCall(String apiProductId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-products/{apiProductId}/deploy-revision"
            .replaceAll("\\{" + "apiProductId" + "\\}", localVarApiClient.escapeString(apiProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAPIProductRevisionDeploymentsValidateBeforeCall(String apiProductId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiProductId' is set
        if (apiProductId == null) {
            throw new ApiException("Missing the required parameter 'apiProductId' when calling getAPIProductRevisionDeployments(Async)");
        }
        

        okhttp3.Call localVarCall = getAPIProductRevisionDeploymentsCall(apiProductId, _callback);
        return localVarCall;

    }

    /**
     * List available deployed revision deployment details of an API Product
     * List available deployed revision deployment details of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @return APIRevisionDeploymentListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of deployed revision deployment details are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionDeploymentListDTO getAPIProductRevisionDeployments(String apiProductId) throws ApiException {
        ApiResponse<APIRevisionDeploymentListDTO> localVarResp = getAPIProductRevisionDeploymentsWithHttpInfo(apiProductId);
        return localVarResp.getData();
    }

    /**
     * List available deployed revision deployment details of an API Product
     * List available deployed revision deployment details of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @return ApiResponse&lt;APIRevisionDeploymentListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of deployed revision deployment details are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionDeploymentListDTO> getAPIProductRevisionDeploymentsWithHttpInfo(String apiProductId) throws ApiException {
        okhttp3.Call localVarCall = getAPIProductRevisionDeploymentsValidateBeforeCall(apiProductId, null);
        Type localVarReturnType = new TypeToken<APIRevisionDeploymentListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List available deployed revision deployment details of an API Product (asynchronously)
     * List available deployed revision deployment details of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of deployed revision deployment details are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPIProductRevisionDeploymentsAsync(String apiProductId, final ApiCallback<APIRevisionDeploymentListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAPIProductRevisionDeploymentsValidateBeforeCall(apiProductId, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionDeploymentListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAPIProductRevisions
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param query  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of API Product revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPIProductRevisionsCall(String apiProductId, String query, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-products/{apiProductId}/revisions"
            .replaceAll("\\{" + "apiProductId" + "\\}", localVarApiClient.escapeString(apiProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAPIProductRevisionsValidateBeforeCall(String apiProductId, String query, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiProductId' is set
        if (apiProductId == null) {
            throw new ApiException("Missing the required parameter 'apiProductId' when calling getAPIProductRevisions(Async)");
        }
        

        okhttp3.Call localVarCall = getAPIProductRevisionsCall(apiProductId, query, _callback);
        return localVarCall;

    }

    /**
     * List available revisions of an API Product
     * List available revisions of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param query  (optional)
     * @return APIRevisionListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of API Product revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIRevisionListDTO getAPIProductRevisions(String apiProductId, String query) throws ApiException {
        ApiResponse<APIRevisionListDTO> localVarResp = getAPIProductRevisionsWithHttpInfo(apiProductId, query);
        return localVarResp.getData();
    }

    /**
     * List available revisions of an API Product
     * List available revisions of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param query  (optional)
     * @return ApiResponse&lt;APIRevisionListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of API Product revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIRevisionListDTO> getAPIProductRevisionsWithHttpInfo(String apiProductId, String query) throws ApiException {
        okhttp3.Call localVarCall = getAPIProductRevisionsValidateBeforeCall(apiProductId, query, null);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List available revisions of an API Product (asynchronously)
     * List available revisions of an API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param query  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of API Product revisions are returned.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAPIProductRevisionsAsync(String apiProductId, String query, final ApiCallback<APIRevisionListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAPIProductRevisionsValidateBeforeCall(apiProductId, query, _callback);
        Type localVarReturnType = new TypeToken<APIRevisionListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreAPIProductRevision
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Restored. Successful response with the newly restored API Product object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreAPIProductRevisionCall(String apiProductId, String revisionId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api-products/{apiProductId}/restore-revision"
            .replaceAll("\\{" + "apiProductId" + "\\}", localVarApiClient.escapeString(apiProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionId", revisionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreAPIProductRevisionValidateBeforeCall(String apiProductId, String revisionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiProductId' is set
        if (apiProductId == null) {
            throw new ApiException("Missing the required parameter 'apiProductId' when calling restoreAPIProductRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling restoreAPIProductRevision(Async)");
        }
        

        okhttp3.Call localVarCall = restoreAPIProductRevisionCall(apiProductId, revisionId, _callback);
        return localVarCall;

    }

    /**
     * Restore a revision
     * Restore a revision to the working copy of the API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return APIProductDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Restored. Successful response with the newly restored API Product object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public APIProductDTO restoreAPIProductRevision(String apiProductId, String revisionId) throws ApiException {
        ApiResponse<APIProductDTO> localVarResp = restoreAPIProductRevisionWithHttpInfo(apiProductId, revisionId);
        return localVarResp.getData();
    }

    /**
     * Restore a revision
     * Restore a revision to the working copy of the API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @return ApiResponse&lt;APIProductDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Restored. Successful response with the newly restored API Product object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<APIProductDTO> restoreAPIProductRevisionWithHttpInfo(String apiProductId, String revisionId) throws ApiException {
        okhttp3.Call localVarCall = restoreAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, null);
        Type localVarReturnType = new TypeToken<APIProductDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restore a revision (asynchronously)
     * Restore a revision to the working copy of the API Product 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Restored. Successful response with the newly restored API Product object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreAPIProductRevisionAsync(String apiProductId, String revisionId, final ApiCallback<APIProductDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, _callback);
        Type localVarReturnType = new TypeToken<APIProductDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for undeployAPIProductRevision
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly undeployed APIRevisionDeploymentList object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call undeployAPIProductRevisionCall(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = apIRevisionDeploymentDTO;

        // create path and map variables
        String localVarPath = "/api-products/{apiProductId}/undeploy-revision"
            .replaceAll("\\{" + "apiProductId" + "\\}", localVarApiClient.escapeString(apiProductId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (revisionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("revisionId", revisionId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call undeployAPIProductRevisionValidateBeforeCall(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiProductId' is set
        if (apiProductId == null) {
            throw new ApiException("Missing the required parameter 'apiProductId' when calling undeployAPIProductRevision(Async)");
        }
        
        // verify the required parameter 'revisionId' is set
        if (revisionId == null) {
            throw new ApiException("Missing the required parameter 'revisionId' when calling undeployAPIProductRevision(Async)");
        }
        

        okhttp3.Call localVarCall = undeployAPIProductRevisionCall(apiProductId, revisionId, apIRevisionDeploymentDTO, _callback);
        return localVarCall;

    }

    /**
     * Un-Deploy a revision
     * Un-Deploy a revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly undeployed APIRevisionDeploymentList object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void undeployAPIProductRevision(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO) throws ApiException {
        undeployAPIProductRevisionWithHttpInfo(apiProductId, revisionId, apIRevisionDeploymentDTO);
    }

    /**
     * Un-Deploy a revision
     * Un-Deploy a revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly undeployed APIRevisionDeploymentList object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> undeployAPIProductRevisionWithHttpInfo(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO) throws ApiException {
        okhttp3.Call localVarCall = undeployAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, apIRevisionDeploymentDTO, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Un-Deploy a revision (asynchronously)
     * Un-Deploy a revision 
     * @param apiProductId **API Product ID** consisting of the **UUID** of the API Product. Using the **UUID** in the API call is recommended.  (required)
     * @param revisionId Revision ID of an API  (required)
     * @param apIRevisionDeploymentDTO Deployment object that needs to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK.  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly undeployed APIRevisionDeploymentList object as the entity in the body.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call undeployAPIProductRevisionAsync(String apiProductId, String revisionId, List<APIRevisionDeploymentDTO> apIRevisionDeploymentDTO, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = undeployAPIProductRevisionValidateBeforeCall(apiProductId, revisionId, apIRevisionDeploymentDTO, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
