/*
 * WSO2 API Manager - Publisher API
 * This document specifies a **RESTful API** for WSO2 **API Manager** - **Publisher**.  # Authentication The Publisher REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps that you will need to follow to obtain an access token. First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types in the payload. A Sample payload is shown below. ```   {   \"callbackUrl\":\"www.google.lk\",   \"clientName\":\"rest_api_publisher\",   \"owner\":\"admin\",   \"grantType\":\"client_credentials password refresh_token\",   \"saasApp\":true   } ``` Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the base64 encoded admin username and password. **Format of the request** ```   curl -X POST -H \"Authorization: Basic Base64(admin_username:admin_password)\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register ``` **Sample request** ```   curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\"   \\ -d @payload.json https://localhost:9443/client-registration/v0.17/register ``` Following is a sample response after invoking the above curl. ``` { \"clientId\": \"fOCi4vNJ59PpHucC2CAYfYuADdMa\", \"clientName\": \"rest_api_publisher\", \"callBackURL\": \"www.google.lk\", \"clientSecret\": \"a4FwHlq0iCIKVs2MPIIDnepZnYMa\", \"isSaasApplication\": true, \"appOwner\": \"admin\", \"jsonString\": \"{\\\"grant_types\\\":\\\"client_credentials password refresh_token\\\",\\\"redirect_uris\\\":\\\"www.google.lk\\\",\\\"client_name\\\":\\\"rest_api123\\\"}\", \"jsonAppAttribute\": \"{}\", \"tokenType\": null } ``` Next you must use the above client id and secret to obtain the access token. We will be using the password grant type for this, you can use any grant type you desire. You also need to add the proper **scope** when getting the access token. All possible scopes for publisher REST API can be viewed in **OAuth2 Security** section of this document and scope for each resource is given in **authorization** section of resource documentation. Following is the format of the request if you are using the password grant type. ``` curl -k -d \"grant_type=password&username=<admin_username>&password=<admin_passowrd&scope=<scopes seperated by space>\" \\ -H \"Authorization: Basic base64(cliet_id:client_secret)\" \\ https://<host>:<servlet_port>/oauth2/token ``` **Sample request** ``` curl https://localhost:9443/oauth2/token -k \\ -H \"Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h\" \\ -d \"grant_type=password&username=admin&password=admin&scope=apim:api_view apim:api_create\" ``` Shown below is a sample response to the above request. ``` { \"access_token\": \"e79bda48-3406-3178-acce-f6e4dbdcbb12\", \"refresh_token\": \"a757795d-e69f-38b8-bd85-9aded677a97c\", \"scope\": \"apim:api_create apim:api_view\", \"token_type\": \"Bearer\", \"expires_in\": 3600 } ``` Now you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.  # Try out in Postman If you want to try-out the embedded postman collection with \"Run in Postman\" option, please follow the guidelines listed below. * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes. * Make sure you have an API Manager instance up and running. * Update the `basepath` parameter to match the hostname and port of the APIM instance.  [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/a09044034b5c3c1b01a9) 
 *
 * The version of the OpenAPI document: v4
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.publisher.api.v1;

import org.wso2.am.integration.clients.publisher.api.ApiCallback;
import org.wso2.am.integration.clients.publisher.api.ApiClient;
import org.wso2.am.integration.clients.publisher.api.ApiException;
import org.wso2.am.integration.clients.publisher.api.ApiResponse;
import org.wso2.am.integration.clients.publisher.api.Configuration;
import org.wso2.am.integration.clients.publisher.api.Pair;
import org.wso2.am.integration.clients.publisher.api.ProgressRequestBody;
import org.wso2.am.integration.clients.publisher.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.publisher.api.v1.dto.ErrorDTO;
import java.io.File;
import org.wso2.am.integration.clients.publisher.api.v1.dto.OperationPolicyDataDTO;
import org.wso2.am.integration.clients.publisher.api.v1.dto.OperationPolicyDataListDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OperationPoliciesApi {
    private ApiClient localVarApiClient;

    public OperationPoliciesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OperationPoliciesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addCommonOperationPolicy
     * @param policySpecFile Operation policy specification to upload (optional)
     * @param synapsePolicyDefinitionFile Operation policy definition of synapse gateway to upload (optional)
     * @param ccPolicyDefinitionFile Operation policy definition of choreo connect to upload (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK. Shared operation policy uploaded  </td><td>  * Location - The URL of the uploaded common operation policy of the API.  <br>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommonOperationPolicyCall(File policySpecFile, File synapsePolicyDefinitionFile, File ccPolicyDefinitionFile, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operation-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (policySpecFile != null) {
            localVarFormParams.put("policySpecFile", policySpecFile);
        }

        if (synapsePolicyDefinitionFile != null) {
            localVarFormParams.put("synapsePolicyDefinitionFile", synapsePolicyDefinitionFile);
        }

        if (ccPolicyDefinitionFile != null) {
            localVarFormParams.put("ccPolicyDefinitionFile", ccPolicyDefinitionFile);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCommonOperationPolicyValidateBeforeCall(File policySpecFile, File synapsePolicyDefinitionFile, File ccPolicyDefinitionFile, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = addCommonOperationPolicyCall(policySpecFile, synapsePolicyDefinitionFile, ccPolicyDefinitionFile, _callback);
        return localVarCall;

    }

    /**
     * Add a new common operation policy
     * This operation can be used to add a new common operation policy. 
     * @param policySpecFile Operation policy specification to upload (optional)
     * @param synapsePolicyDefinitionFile Operation policy definition of synapse gateway to upload (optional)
     * @param ccPolicyDefinitionFile Operation policy definition of choreo connect to upload (optional)
     * @return OperationPolicyDataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK. Shared operation policy uploaded  </td><td>  * Location - The URL of the uploaded common operation policy of the API.  <br>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public OperationPolicyDataDTO addCommonOperationPolicy(File policySpecFile, File synapsePolicyDefinitionFile, File ccPolicyDefinitionFile) throws ApiException {
        ApiResponse<OperationPolicyDataDTO> localVarResp = addCommonOperationPolicyWithHttpInfo(policySpecFile, synapsePolicyDefinitionFile, ccPolicyDefinitionFile);
        return localVarResp.getData();
    }

    /**
     * Add a new common operation policy
     * This operation can be used to add a new common operation policy. 
     * @param policySpecFile Operation policy specification to upload (optional)
     * @param synapsePolicyDefinitionFile Operation policy definition of synapse gateway to upload (optional)
     * @param ccPolicyDefinitionFile Operation policy definition of choreo connect to upload (optional)
     * @return ApiResponse&lt;OperationPolicyDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK. Shared operation policy uploaded  </td><td>  * Location - The URL of the uploaded common operation policy of the API.  <br>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationPolicyDataDTO> addCommonOperationPolicyWithHttpInfo(File policySpecFile, File synapsePolicyDefinitionFile, File ccPolicyDefinitionFile) throws ApiException {
        okhttp3.Call localVarCall = addCommonOperationPolicyValidateBeforeCall(policySpecFile, synapsePolicyDefinitionFile, ccPolicyDefinitionFile, null);
        Type localVarReturnType = new TypeToken<OperationPolicyDataDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new common operation policy (asynchronously)
     * This operation can be used to add a new common operation policy. 
     * @param policySpecFile Operation policy specification to upload (optional)
     * @param synapsePolicyDefinitionFile Operation policy definition of synapse gateway to upload (optional)
     * @param ccPolicyDefinitionFile Operation policy definition of choreo connect to upload (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK. Shared operation policy uploaded  </td><td>  * Location - The URL of the uploaded common operation policy of the API.  <br>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addCommonOperationPolicyAsync(File policySpecFile, File synapsePolicyDefinitionFile, File ccPolicyDefinitionFile, final ApiCallback<OperationPolicyDataDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCommonOperationPolicyValidateBeforeCall(policySpecFile, synapsePolicyDefinitionFile, ccPolicyDefinitionFile, _callback);
        Type localVarReturnType = new TypeToken<OperationPolicyDataDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCommonOperationPolicyByPolicyId
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommonOperationPolicyByPolicyIdCall(String operationPolicyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operation-policies/{operationPolicyId}"
            .replaceAll("\\{" + "operationPolicyId" + "\\}", localVarApiClient.escapeString(operationPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommonOperationPolicyByPolicyIdValidateBeforeCall(String operationPolicyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'operationPolicyId' is set
        if (operationPolicyId == null) {
            throw new ApiException("Missing the required parameter 'operationPolicyId' when calling deleteCommonOperationPolicyByPolicyId(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCommonOperationPolicyByPolicyIdCall(operationPolicyId, _callback);
        return localVarCall;

    }

    /**
     * Delete a common operation policy
     * This operation can be used to delete an existing common opreation policy by providing the Id of the policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCommonOperationPolicyByPolicyId(String operationPolicyId) throws ApiException {
        deleteCommonOperationPolicyByPolicyIdWithHttpInfo(operationPolicyId);
    }

    /**
     * Delete a common operation policy
     * This operation can be used to delete an existing common opreation policy by providing the Id of the policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCommonOperationPolicyByPolicyIdWithHttpInfo(String operationPolicyId) throws ApiException {
        okhttp3.Call localVarCall = deleteCommonOperationPolicyByPolicyIdValidateBeforeCall(operationPolicyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a common operation policy (asynchronously)
     * This operation can be used to delete an existing common opreation policy by providing the Id of the policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. The request must be conditional but no condition has been specified. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCommonOperationPolicyByPolicyIdAsync(String operationPolicyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommonOperationPolicyByPolicyIdValidateBeforeCall(operationPolicyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCommonOperationPolicies
     * @param limit Maximum size of policy array to return.  (optional)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param query **Search condition**.  You can search in attributes by using an **\&quot;&lt;attribute&gt;:\&quot;** modifier.  Eg. \&quot;name:addHeader\&quot; will match an API Policy if the provider of the API Policy contains \&quot;addHeader\&quot;. \&quot;version:\&quot;v1\&quot;\&quot; will match an API Policy if the provider of the API Policy contains \&quot;v1\&quot;.  Also you can use combined modifiers Eg. name:addHeader&amp;version:v1 will match an API Policy if the name of the API Policy is addHeader and version is v1.  Supported attribute modifiers are [**version, name**]  If query attributes are provided, this returns all API policies available under the given limit.  Please note that you need to use encoded URL (URL encoding) if you are using a client which does not support URL encoding (such as curl)  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of qualifying policies is returned.  </td><td>  * Content-Type - The content type of the body. <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCommonOperationPoliciesCall(Integer limit, Integer offset, String query, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operation-policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCommonOperationPoliciesValidateBeforeCall(Integer limit, Integer offset, String query, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllCommonOperationPoliciesCall(limit, offset, query, _callback);
        return localVarCall;

    }

    /**
     * Get all common operation policies to all the APIs 
     * This operation provides you a list of all common operation policies that can be used by any API 
     * @param limit Maximum size of policy array to return.  (optional)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param query **Search condition**.  You can search in attributes by using an **\&quot;&lt;attribute&gt;:\&quot;** modifier.  Eg. \&quot;name:addHeader\&quot; will match an API Policy if the provider of the API Policy contains \&quot;addHeader\&quot;. \&quot;version:\&quot;v1\&quot;\&quot; will match an API Policy if the provider of the API Policy contains \&quot;v1\&quot;.  Also you can use combined modifiers Eg. name:addHeader&amp;version:v1 will match an API Policy if the name of the API Policy is addHeader and version is v1.  Supported attribute modifiers are [**version, name**]  If query attributes are provided, this returns all API policies available under the given limit.  Please note that you need to use encoded URL (URL encoding) if you are using a client which does not support URL encoding (such as curl)  (optional)
     * @return OperationPolicyDataListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of qualifying policies is returned.  </td><td>  * Content-Type - The content type of the body. <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public OperationPolicyDataListDTO getAllCommonOperationPolicies(Integer limit, Integer offset, String query) throws ApiException {
        ApiResponse<OperationPolicyDataListDTO> localVarResp = getAllCommonOperationPoliciesWithHttpInfo(limit, offset, query);
        return localVarResp.getData();
    }

    /**
     * Get all common operation policies to all the APIs 
     * This operation provides you a list of all common operation policies that can be used by any API 
     * @param limit Maximum size of policy array to return.  (optional)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param query **Search condition**.  You can search in attributes by using an **\&quot;&lt;attribute&gt;:\&quot;** modifier.  Eg. \&quot;name:addHeader\&quot; will match an API Policy if the provider of the API Policy contains \&quot;addHeader\&quot;. \&quot;version:\&quot;v1\&quot;\&quot; will match an API Policy if the provider of the API Policy contains \&quot;v1\&quot;.  Also you can use combined modifiers Eg. name:addHeader&amp;version:v1 will match an API Policy if the name of the API Policy is addHeader and version is v1.  Supported attribute modifiers are [**version, name**]  If query attributes are provided, this returns all API policies available under the given limit.  Please note that you need to use encoded URL (URL encoding) if you are using a client which does not support URL encoding (such as curl)  (optional)
     * @return ApiResponse&lt;OperationPolicyDataListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of qualifying policies is returned.  </td><td>  * Content-Type - The content type of the body. <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationPolicyDataListDTO> getAllCommonOperationPoliciesWithHttpInfo(Integer limit, Integer offset, String query) throws ApiException {
        okhttp3.Call localVarCall = getAllCommonOperationPoliciesValidateBeforeCall(limit, offset, query, null);
        Type localVarReturnType = new TypeToken<OperationPolicyDataListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all common operation policies to all the APIs  (asynchronously)
     * This operation provides you a list of all common operation policies that can be used by any API 
     * @param limit Maximum size of policy array to return.  (optional)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param query **Search condition**.  You can search in attributes by using an **\&quot;&lt;attribute&gt;:\&quot;** modifier.  Eg. \&quot;name:addHeader\&quot; will match an API Policy if the provider of the API Policy contains \&quot;addHeader\&quot;. \&quot;version:\&quot;v1\&quot;\&quot; will match an API Policy if the provider of the API Policy contains \&quot;v1\&quot;.  Also you can use combined modifiers Eg. name:addHeader&amp;version:v1 will match an API Policy if the name of the API Policy is addHeader and version is v1.  Supported attribute modifiers are [**version, name**]  If query attributes are provided, this returns all API policies available under the given limit.  Please note that you need to use encoded URL (URL encoding) if you are using a client which does not support URL encoding (such as curl)  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of qualifying policies is returned.  </td><td>  * Content-Type - The content type of the body. <br>  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCommonOperationPoliciesAsync(Integer limit, Integer offset, String query, final ApiCallback<OperationPolicyDataListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCommonOperationPoliciesValidateBeforeCall(limit, offset, query, _callback);
        Type localVarReturnType = new TypeToken<OperationPolicyDataListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommonOperationPolicyByPolicyId
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommonOperationPolicyByPolicyIdCall(String operationPolicyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operation-policies/{operationPolicyId}"
            .replaceAll("\\{" + "operationPolicyId" + "\\}", localVarApiClient.escapeString(operationPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommonOperationPolicyByPolicyIdValidateBeforeCall(String operationPolicyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'operationPolicyId' is set
        if (operationPolicyId == null) {
            throw new ApiException("Missing the required parameter 'operationPolicyId' when calling getCommonOperationPolicyByPolicyId(Async)");
        }
        

        okhttp3.Call localVarCall = getCommonOperationPolicyByPolicyIdCall(operationPolicyId, _callback);
        return localVarCall;

    }

    /**
     * Get the details of a common operation policy by providing policy ID
     * This operation can be used to retrieve a particular common operation policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @return OperationPolicyDataDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public OperationPolicyDataDTO getCommonOperationPolicyByPolicyId(String operationPolicyId) throws ApiException {
        ApiResponse<OperationPolicyDataDTO> localVarResp = getCommonOperationPolicyByPolicyIdWithHttpInfo(operationPolicyId);
        return localVarResp.getData();
    }

    /**
     * Get the details of a common operation policy by providing policy ID
     * This operation can be used to retrieve a particular common operation policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @return ApiResponse&lt;OperationPolicyDataDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationPolicyDataDTO> getCommonOperationPolicyByPolicyIdWithHttpInfo(String operationPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getCommonOperationPolicyByPolicyIdValidateBeforeCall(operationPolicyId, null);
        Type localVarReturnType = new TypeToken<OperationPolicyDataDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a common operation policy by providing policy ID (asynchronously)
     * This operation can be used to retrieve a particular common operation policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommonOperationPolicyByPolicyIdAsync(String operationPolicyId, final ApiCallback<OperationPolicyDataDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommonOperationPolicyByPolicyIdValidateBeforeCall(operationPolicyId, _callback);
        Type localVarReturnType = new TypeToken<OperationPolicyDataDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommonOperationPolicyContentByPolicyId
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommonOperationPolicyContentByPolicyIdCall(String operationPolicyId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operation-policies/{operationPolicyId}/content"
            .replaceAll("\\{" + "operationPolicyId" + "\\}", localVarApiClient.escapeString(operationPolicyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/zip", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommonOperationPolicyContentByPolicyIdValidateBeforeCall(String operationPolicyId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'operationPolicyId' is set
        if (operationPolicyId == null) {
            throw new ApiException("Missing the required parameter 'operationPolicyId' when calling getCommonOperationPolicyContentByPolicyId(Async)");
        }
        

        okhttp3.Call localVarCall = getCommonOperationPolicyContentByPolicyIdCall(operationPolicyId, _callback);
        return localVarCall;

    }

    /**
     * Download a common operation policy
     * This operation can be used to download a selected common operation policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public File getCommonOperationPolicyContentByPolicyId(String operationPolicyId) throws ApiException {
        ApiResponse<File> localVarResp = getCommonOperationPolicyContentByPolicyIdWithHttpInfo(operationPolicyId);
        return localVarResp.getData();
    }

    /**
     * Download a common operation policy
     * This operation can be used to download a selected common operation policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getCommonOperationPolicyContentByPolicyIdWithHttpInfo(String operationPolicyId) throws ApiException {
        okhttp3.Call localVarCall = getCommonOperationPolicyContentByPolicyIdValidateBeforeCall(operationPolicyId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download a common operation policy (asynchronously)
     * This operation can be used to download a selected common operation policy. 
     * @param operationPolicyId Operation policy Id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Operation policy returned.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. The specified resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommonOperationPolicyContentByPolicyIdAsync(String operationPolicyId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommonOperationPolicyContentByPolicyIdValidateBeforeCall(operationPolicyId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
