<APIManager>
    <!--
        JNDI name of the data source to be used by the API publisher, API store and API
        key manager. This data source should be defined in the master-datasources.xml file
        in conf/datasources directory.
    -->
    <DataSourceName>jdbc/WSO2AM_DB</DataSourceName>

    <!-- This parameter is used when adding api management capability to other products like GReg, AS, DSS etc.-->
    <GatewayType>Synapse</GatewayType>
	
  <!-- This parameter is used to enable the securevault support when try to publish endpoint secured APIs. Values should be "true" or "false".
  By default secure vault is disabled.-->
	<EnableSecureVault>false</EnableSecureVault>
    <!--
        Database configuration used by API publisher, API store and API key manager.
        When these components are deployed separately, each of them should have
        separate database configurations pointing to the same physical database.
    -->
    <!--Database-->
        <!--
            JDBC connection string for the database.
        -->
        <!--<URL>jdbc:h2:repository/database/WSO2AM_DB</URL> -->

        <!--
            JDBC username for the database.
        -->
        <!--<Username>wso2carbon</Username>-->

        <!--
            JDBC password for the database.
        -->
        <!--<Password>wso2carbon</Password>


            JDBC driver for the database.
        -->
        <!--<Driver>org.h2.Driver</Driver>
    </Database>-->

    <!--
        Authentication manager configuration for API publisher and API store. This is
        a required configuration for both web applications as their user authentication
        logic relies on this.
    -->
    <AuthManager>
        <!--
            Server URL of the Authentication service
        -->
        <ServerURL>https://${carbon.local.ip}:${mgt.transport.https.port}/services/</ServerURL>
        <!--
            Admin username for the Authentication manager.
        -->
        <Username>admin</Username>
        <!--
            Admin password for the Authentication manager.
        -->
        <Password>admin</Password>
    </AuthManager>

    <!--
        Configuration parameters for the API authentication handler. This is an optional
        configuration for the API Gateway component.
    -->
    <APIConsumerAuthentication>
        <!--
            Name of the security context header to be added to the validated requests.
        -->
        <SecurityContextHeader>X-JWT-Assertion</SecurityContextHeader>

	<!-- 
		Fully qualified name of the class that will retrieve additional user claims
		to be appended to the JWT. If not specified no claims will be appended.
		The DefaultClaimsRetriever class adds user claims from the default carbon user store.
	-->
	<ClaimsRetrieverImplClass>org.wso2.carbon.apimgt.impl.token.DefaultClaimsRetriever</ClaimsRetrieverImplClass>

	<!--
		The dialectURI under which the claimURIs that need to be appended to the
		JWT are defined. Not used with custom ClaimsRetriever implementations. The
		same value is used in the keys for appending the default properties to the
		JWT.
	-->
    	<ConsumerDialectURI>http://wso2.org/claims</ConsumerDialectURI>
    	
    	<!-- 
		Signature algorithm. Accepts "SHA256withRSA" or "NONE". To disable signing explicitly specify "NONE".
	-->
	<SignatureAlgorithm>SHA256withRSA</SignatureAlgorithm>

    <!--
		Enable/Disable JWT generation. Default is false.
	-->
	<EnableTokenGeneration>true</EnableTokenGeneration>
	
	<!-- 
		Remove OAuth headers from outgoing message or keep with it.
	-->
	<RemoveOAuthHeadersFromOutMessage>true</RemoveOAuthHeadersFromOutMessage>
    </APIConsumerAuthentication>

    <!-- Primary/secondary login configuration for APIstore. If user likes to keep two login attributes in a distributed setup, to login the APIstore,
		he should configure this section. Primary login doesn't have a claimUri associated with it. But secondary login, which is a claim attribute,
		is associated with a claimuri.-->
    <!-- <LoginConfig>
            <UserIdLogin  primary="true">
        <ClaimUri></ClaimUri>
        </UserIdLogin>
        <EmailLogin  primary="false">
            <ClaimUri>http://wso2.org/claims/emailaddress</ClaimUri>
        </EmailLogin>
    </LoginConfig>-->

    <!--
        Credentials for the API gateway admin server. This configuration
        is mainly used by the API publisher and store to connect to the API gateway and
        create/update published API configurations.
    -->
    <APIGateway>
	<!-- The environments to which an API will be published -->
	<Environments>
		<!-- Environments can be of different types. Allowed values are 'hybrid', 'production' and 'sandbox'.
		     An API deployed on a 'production' type gateway will only support production keys
		     An API deployed on a 'sandbox' type gateway will only support sandbox keys
		     An API deployed on a 'hybrid' type gateway will support both production and sandbox keys -->
                <Environment type="hybrid">
                        <Name>Production and Sandbox</Name>
			<!--
            			Server URL of the API gateway.
        		-->
                        <ServerURL>https://${carbon.local.ip}:${mgt.transport.https.port}/services/</ServerURL>
			<!--
            			Admin username for the API gateway.
        		-->
                        <Username>admin</Username>
			<!--
            			Admin password for the API gateway.
        		-->
                        <Password>admin</Password>
			<!--
            			Endpoint URLs for the APIs hosted in this API gateway.
        		-->
                        <GatewayEndpoint>http://${carbon.local.ip}:${http.nio.port},https://${carbon.local.ip}:${https.nio.port}</GatewayEndpoint>
                </Environment>
        </Environments>
        
        <!--
            Enable/Disable caching at gateway node.
        -->
        <EnableGatewayKeyCache>true</EnableGatewayKeyCache>

	<!-- Header name can be configurable, as you preferred. When API invocation is restricted to access only for authorized domains, 
		client request should send his domain, as the value of this header. 
	-->
	<ClientDomainHeader>referer</ClientDomainHeader>

    </APIGateway>

     <!--
	    Enable/Disable Usage metering and billing for api usage
     -->
     <EnableBillingAndUsage>true</EnableBillingAndUsage>

    <!--
        API usage tracker configuration used by the BAM data publisher and 
        Google Analytics publisher in API gateway.
    -->
    <APIUsageTracking>
	
        <!--
            Enable/Disable the API usage tracker.
        -->
        <Enabled>false</Enabled>

        <!--
            API Usage Data Publisher.
        -->
        <PublisherClass>org.wso2.carbon.apimgt.usage.publisher.APIMgtUsageDataBridgeDataPublisher</PublisherClass>

        <!--
            Thrift port of the remote BAM server.
        -->
        <ThriftPort>7612</ThriftPort>

        <!--
            Server URL of the remote BAM/CEP server used to collect statistics. Must
            be specified in protocol://hostname:port/ format.

            An event can also be published to multiple Receiver Groups each having 1 or more receivers. Receiver
            Groups are delimited by curly braces whereas receivers are delimited by commas.
	    Ex - Multiple Receivers within a single group
		 tcp://localhost:7612/,tcp://localhost:7613/,tcp://localhost:7614/
	    Ex - Multiple Receiver Groups with two receivers each		
                 {tcp://localhost:7612/,tcp://localhost:7613},{tcp://localhost:7712/,tcp://localhost:7713/} 
        -->
        <BAMServerURL>tcp://localhost:7612/</BAMServerURL>

        <!--
            Administrator username to login to the remote BAM server.
        -->
        <BAMUsername>admin</BAMUsername>

        <!--
            Administrator password to login to the remote BAM server.
        -->
        <BAMPassword>admin</BAMPassword>

        <!--
            JNDI name of the data source to be used for getting BAM statistics.This data source should
            be defined in the master-datasources.xml file in conf/datasources directory.
        -->
        <!--DataSourceName>jdbc/WSO2AM_STATS_DB</DataSourceName-->

	<!--
            Google Analytics publisher configuration. Create Google Analytics account and obtain a
            Tracking ID. 
	    Reffer http://support.google.com/analytics/bin/answer.py?hl=en&answer=1009694
        -->
        <GoogleAnalyticsTracking>
             <!--
                 Enable/Disable Google Analytics Tracking
             -->
             <Enabled>false</Enabled>

             <!--
                Google Analytics Tracking ID    
             -->
             <TrackingID>UA-XXXXXXXX-X</TrackingID>

       </GoogleAnalyticsTracking>

    </APIUsageTracking>

    <!--
        API key manager configuration used by API key manager (IS), API store and API gateway.
        This is used by API store to generate and manage API keys. API gateway uses it to
        validate and authenticate users against the provided API keys.
    -->
    <APIKeyManager>
        <!--
            Server URL of the API key manager
        -->
        <ServerURL>https://${carbon.local.ip}:${mgt.transport.https.port}/services/</ServerURL>

        <!--
            Admin username for API key manager.
        -->
        <Username>admin</Username>

        <!--
            Admin password for API key manager.
        -->
        <Password>admin</Password>
        <!--
            Enable/Disable JWT caching.
        -->
        <EnableJWTCache>true</EnableJWTCache>

        <!--
            Enable/Disable API key validation information caching at key-management server
        -->

        <EnableKeyMgtValidationInfoCache>true</EnableKeyMgtValidationInfoCache>

        <!--
        Configurations related to enable thrift support for key-management related communication.
        If you want to switch back to Web Service Client, change the value of "KeyValidatorClientType" to "WSClient".
        In a distributed environment;
        -If you are at the Gateway node, you need to point "ThriftClientPort" value to the "ThriftServerPort" value given at KeyManager node.
        -If you need to start two API Manager instances in the same machine, you need to give different ports to "ThriftServerPort" value in two nodes.
        -ThriftServerHost - Allows to configure a hostname for the thrift server. It uses the carbon hostname by default.
        -->

        <KeyValidatorClientType>WSClient</KeyValidatorClientType>
        <ThriftClientPort>10397</ThriftClientPort>
        <ThriftClientConnectionTimeOut>10000</ThriftClientConnectionTimeOut>
        <ThriftServerPort>10397</ThriftServerPort>
	<!--ThriftServerHost>localhost</ThriftServerHost-->
	<EnableThriftServer>true</EnableThriftServer>
	<!--
	   This parameter is used to specify Thrift server host name. In a distributed deployment we must set this parameter
	   if keymanager running on separate machine. Gateway use this parameter to connect key validation thrift service
	-->
	<!--ThriftServerHost>127.0.0.1</ThriftServerHost-->

        <!--
            Remove UserName from JWT Token
        -->
       <!-- <RemoveUserNameToJWTForApplicationToken>true</RemoveUserNameToJWTForApplicationToken>-->

	<!-- Name of the token API -->
	<TokenEndPointName>/oauth2/token</TokenEndPointName>
	
	<!-- Whether to encrypt tokens when storing in the Database
	Note: If changing this value to true, change the value of <TokenPersistenceProcessor> to
	org.wso2.carbon.identity.oauth.tokenprocessor.EncryptionDecryptionProcessor in the identity.xml -->
	<EncryptPersistedTokens>false</EncryptPersistedTokens>

    </APIKeyManager>

    <!--
        Settings related to managing API access tiers.
    -->
    <TierManagement>
        <!--
            Enable the providers to expose their APIs over the special 'Unlimited' tier which
            basically disables tier based throttling for the specified APIs.
        -->
        <EnableUnlimitedTier>true</EnableUnlimitedTier>
    </TierManagement>

    <!--
        Use this configuration to control the self-sign-up capability in API store.
    -->
    <SelfSignUp>
        <!--
            Enable or disable the self-sign-up feature.
        -->
        <Enabled>true</Enabled>

        <!--
            Self signed up users should be associated with a suitable subscriber
            role for them to be able to access the API store portal. This required
            parameter specifies which role should be used for that purpose. The role
            specified here must have the '/permission/admin/manage/api/subscribe'
            permission.
        -->
        <SubscriberRoleName>subscriber</SubscriberRoleName>

        <!--
            This parameter specifies whether the subscriber role specified above
            should be created in the local user store or not. This only makes sense
            when the API subscribers are authenticated against the local user store.
            That is the local Carbon server is acting as the AuthManager. If a remote
            Carbon server is acting as the AuthManager, this parameter should be turned
            off for the local server.
        -->
        <CreateSubscriberRole>true</CreateSubscriberRole>
    </SelfSignUp>

    <!--
        Use this configuration to control the number of APIs shown in API store.
    -->
    <APIStore>

        <DisplayURL>false</DisplayURL>
        <URL>https://${carbon.local.ip}:${mgt.transport.https.port}/store</URL>
        <!--
            This parameter specifies whether to display multiple versions of same
            API or only showing the latest version of an API.

        -->
        <DisplayMultipleVersions>true</DisplayMultipleVersions>
        <!--
            This parameter specifies whether to display all the APIs
            [which are having DEPRECATED/PUBLISHED status] or only display the APIs
            with having their status is as 'PUBLISHED'

        -->
        <DisplayAllAPIs>true</DisplayAllAPIs>
		
		 <!--
            This parameter specifies whether to display the comment editing facility or not.
           Default is "true". If user wants to disable, he must set this param as "false"

        -->
		<DisplayComments>true</DisplayComments>
		
		 <!--
            This parameter specifies whether to display the ratings  or not.
           Default is "true". If user wants to disable, he must set this param as "false"

        -->
		<DisplayRatings>true</DisplayRatings>
	      
              <!--
                This parameter specifies the expiration time of the TagCache. TagCache will 
                only be created when this element is uncommented. When the specified
                time duration gets elapsed ,tag cache will get re-generated.
               -->
         <!--TagCacheDuration>120000</TagCacheDuration-->


    </APIStore>

    <APIPublisher>
        <DisplayURL>false</DisplayURL>
        <URL>https://${carbon.local.ip}:${mgt.transport.https.port}/publisher</URL>
    </APIPublisher>

    <!--
        Status observers can be registered against the API Publisher to listen for
        API status update events. Each observer must implement the APIStatusObserver
        interface. Multiple observers can be engaged if necessary and in such situations
        they will be notified in the order they are defined here.
    -->
    <!--StatusObservers>
        <Observer>org.wso2.carbon.apimgt.impl.observers.SimpleLoggingObserver</Observer>
    </StatusObservers-->

    <!--
        There are set of plugguble extensions for some operations related to API MAnager
	operations such as self sign in, subscriptions and etc. For those operatios we can
	trigger external work flow of business process server. Here are the configurations
	related to those operations
    -->
    <WorkFlowExtensions>
      <ApplicationCreation executor="org.wso2.carbon.apimgt.impl.workflow.ApplicationCreationSimpleWorkflowExecutor"/>
	  <!--ApplicationCreation executor="org.wso2.carbon.apimgt.impl.workflow.ApplicationCreationWSWorkflowExecutor">
           <Property name="serviceEndpoint">http://localhost:9765/services/ApplicationApprovalWorkFlowProcess/</Property>
           <Property name="username">admin</Property>
           <Property name="password">admin</Property>
           <Property name="callbackURL">https://localhost:8243/services/WorkflowCallbackService</Property>
      </ApplicationCreation-->
      <!--ProductionApplicationRegistration executor="org.wso2.carbon.apimgt.impl.workflow.ApplicationRegistrationSimpleWorkflowExecutor"/-->
      <ProductionApplicationRegistration executor="org.wso2.carbon.apimgt.impl.workflow.ApplicationRegistrationWSWorkflowExecutor">
           <Property name="serviceEndpoint">http://localhost:9765/services/ApplicationRegistrationWorkFlowProcess/</Property>
           <Property name="username">admin</Property>
           <Property name="password">admin</Property>
           <Property name="callbackURL">https://localhost:8243/services/WorkflowCallbackService</Property>
      </ProductionApplicationRegistration>
      <!--SandboxApplicationRegistration executor="org.wso2.carbon.apimgt.impl.workflow.ApplicationRegistrationSimpleWorkflowExecutor"/-->
      <SandboxApplicationRegistration executor="org.wso2.carbon.apimgt.impl.workflow.ApplicationRegistrationWSWorkflowExecutor">
           <Property name="serviceEndpoint">http://localhost:9765/services/ApplicationRegistrationWorkFlowProcess/</Property>
           <Property name="username">admin</Property>
           <Property name="password">admin</Property>
           <Property name="callbackURL">https://localhost:8243/services/WorkflowCallbackService</Property>
      </SandboxApplicationRegistration>
      <SubscriptionCreation executor="org.wso2.carbon.apimgt.impl.workflow.SubscriptionCreationSimpleWorkflowExecutor"/>
      <!--SubscriptionCreation executor="org.wso2.carbon.apimgt.impl.workflow.SubscriptionCreationWSWorkflowExecutor">
           <Property name="serviceEndpoint">http://localhost:9765/services/SubscriptionApprovalWorkFlowProcess/</Property>
           <Property name="username">admin</Property>
           <Property name="password">admin</Property>
           <Property name="callbackURL">https://localhost:8243/services/WorkflowCallbackService</Property>
      </SubscriptionCreation-->
      <UserSignUp executor="org.wso2.carbon.apimgt.impl.workflow.UserSignUpSimpleWorkflowExecutor"/>
      <!--UserSignUp executor="org.wso2.carbon.apimgt.impl.workflow.UserSignUpWSWorkflowExecutor">
           <Property name="serviceEndpoint">http://localhost:9765/services/UserSignupProcess/</Property>
           <Property name="username">admin</Property>
           <Property name="password">admin</Property>
           <Property name="callbackURL">https://localhost:8243/services/WorkflowCallbackService</Property>
      </UserSignUp-->
    </WorkFlowExtensions>

    <!-- 
	Use this configuration Create APIs at the Server startup
    -->
    <StartupAPIPublisher>

	<!--
            Enable/Disable the API Startup Publisher
        -->
	
	<Enabled>true</Enabled>
	
	<!--
	Configuration to create APIs for local endpoints. 
	Endpoint will be computed as http://${carbon.local.ip}:${mgt.transport.http.port}/Context.
	Define many LocalAPI elements as below to create many APIs
	for local Endpoints.
	IconPath should be relative to CARBON_HOME.
	-->
	<LocalAPIs>
		<LocalAPI>	
			<Context>/resource</Context>
			<Provider>admin</Provider>
			<Version>1.0.0</Version>
			<IconPath>none</IconPath>
			<DocumentURL>none</DocumentURL>
			<AuthType>Any</AuthType>
		</LocalAPI>
	</LocalAPIs>
	<!--
	Configuration to create APIs for remote endpoints.
	When Endpoint need to be defined use this configuration.  
	Define many API elements as below to create many APIs
	for external Endpoints.
	If you do not need to add Icon or Documentation set 
	'none' as the value for IconPath & DocumentURL.
	-->
	<APIs>
		<API>	
			<Context>/resource</Context>
			<Endpoint>http://localhost:9764/resource</Endpoint>
			<Provider>admin</Provider>
			<Version>1.0.0</Version>
			<IconPath>none</IconPath>
			<DocumentURL>none</DocumentURL>
			<AuthType>Any</AuthType>
		</API>
	</APIs>
		
    </StartupAPIPublisher>

    <!--
   Below are set of external APIStores which can be configured to publish an API from current running
   APIM server.-->

    <ExternalAPIStores>
        <ExternalAPIStore id="Store1" type="wso2">
            <DisplayName>Store1</DisplayName>
            <Endpoint>http://localhost:9763/store</Endpoint>
            <Username>user1@tenantdomain1.com</Username>
            <Password>test123</Password>
        </ExternalAPIStore>
    </ExternalAPIStores>

    <!--
	When an API is invoked, a list of handlers get engaged to its execution flow. This
	property defines the position of the Extension Handler.
	Supported values: top, bottom
	Defaults to: bottom
    -->	
    <!--ExtensionHandlerPosition>top|bottom</ExtensionHandlerPosition-->


    <!--Configuration to enable/disable sending CORS headers in the Gateway response
        and define the Access-Control-Allow-Origin header value.-->
    <CORSConfiguration>
        
	<!--Configuration to enable/disable sending CORS headers from the Gateway-->
	<Enabled>true</Enabled>

	<!--The value of the Access-Control-Allow-Origin header. Default values are 
	    API Store addresses, which is needed for swagger to function.-->
	<Access-Control-Allow-Origin>https://localhost:9443,http://localhost:9763</Access-Control-Allow-Origin>

	<!--Configure Access-Control-Allow-Headers-->
	<Access-Control-Allow-Headers>authorization,Access-Control-Allow-Origin,Content-Type</Access-Control-Allow-Headers>

	<!--Configure Access-Control-Allow-Methods-->
	<Access-Control-Allow-Methods>GET,POST,PUT,DELETE,OPTIONS</Access-Control-Allow-Methods>

    </CORSConfiguration>
</APIManager>

