<%
// Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
//
// WSO2 Inc. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Order of these operations are important as the results are fetched based on this order.
// To add new tests first, append at the bottom of this jaggery file.
// Then add validations to HostObjectTestCase class in the same order.
// Please add 'print("==");' after each of the tests.
// The resulting array is split based on this "==".

var publisher = require('apipublisher');
var publisherHostObj = new publisher.APIProvider("admin@wso2.com");

//0
print("==");
//1
print(publisherHostObj.validateRoles('admin', 'admin'));
print("==");
//2
print(publisherHostObj.isURLValid("https","https://www.google.com"));
print("==");
//3
print(publisherHostObj.getAPIsByProvider("admin@wso2.com"));
print("==");
//4
print(publisherHostObj.getSubscribedAPIs("admin@wso2.com"));
print("==");
//5
print(publisherHostObj.getAPI("admin@wso2.com","HostObjectTestAPI","1.0.0"));
print("==");
//6
print(publisherHostObj.getTierPermissions());
print("==");
//7
print(publisherHostObj.getTiers());
print("==");
//8
print(publisherHostObj.getAllAPIs());
print("==");
//9
print(publisherHostObj.getAPIsByProvider("admin@wso2.com"));
print("==");
//10
print(publisherHostObj.getSubscribersOfAPI("admin@wso2.com","HostObjectTestAPI","1.0.0"));
print("==");
//11
print(publisherHostObj.isContextExist("HostObjectTestAPI","HostObjectTestAPI"));
print("==");
//12
print(publisherHostObj.searchAPIs("admin@wso2.com","name:HostObjectTestAPI"));
print("==");
//13
print(publisherHostObj.hasCreatePermission());
print("==");
//14
print(publisherHostObj.hasManageTierPermission());
print("==");
//15
print(publisherHostObj.hasUserPermissions("admin@wso2.com"));
print("==");
//16
print(publisherHostObj.hasPublishPermission("admin@wso2.com"));
print("==");
//17
print(publisherHostObj.getAuthServerURL());
print("==");
//18
print(publisherHostObj.getCustomInSequences());
print("==");
//19
print(publisherHostObj.getCustomOutSequences());
print("==");
//20
print(publisherHostObj.getHTTPsURL());
print("==");
//21
print(publisherHostObj.isSynapseGateway());
print("==");
//22
print(publisherHostObj.loadRegistryOfTenant("carbon.super"));
print("==");
//23
print(publisherHostObj.searchAccessTokens("*:*"));
print("==");

var apiData = {};
apiData["provider"] = "admin@wso2.com";
apiData["name"] = "HostObjectTestAPI";
apiData["version"] = "1.0.0";
apiData["apiName"] = "HostObjectTestAPI";
//24
print(publisherHostObj.isAPIOlderVersionExist(apiData));
print("==");
//25
print(publisherHostObj.updateSubscriptionStatus(apiData,"BLOCKED","1"));
print("==");

var tierData = {};
tierData["tierName"] = "Gold";
tierData["permissiontype"] = "Deny";
tierData["roles"] = "admin@wso2.com";
//26
print(publisherHostObj.updateTierPermissions(tierData));
print("==");

// API visibility test cases
//27
print(publisherHostObj.searchAPIs("admin@wso2.com","version:1.0.0"));
print("==");
//28
print(publisherHostObj.searchAPIs("admin@wso2.com","status:PUBLISHED"));
print("==");
//29
print(publisherHostObj.searchAPIs("admin@wso2.com","name:HostObj"));
print("==");
//30
print(publisherHostObj.searchAPIs("admin@wso2.com","name:HOSTOBJECTTESTAPI"));
print("==");
//31
print(publisherHostObj.searchAPIs("admin@wso2.com","name:hostobjecttestapi"));
print("==");
//32
print(publisherHostObj.searchAPIs("admin@wso2.com","provider:admin"));
print("==");
//33
print(publisherHostObj.searchAPIs("admin@wso2.com","provider:adm"));
print("==");
//34
print(publisherHostObj.searchAPIs("admin@wso2.com","manager:notexistkey"));
print("==");
