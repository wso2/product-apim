<?xml version="1.0" encoding="ISO-8859-1"?>

<!--
  ~ Copyright 2005-2011 WSO2, Inc. (http://wso2.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--
    This is the main server configuration file

    ${carbon.home} represents the carbon.home system property.
    Other system properties can be specified in a similar manner.
-->
<Server xmlns="http://wso2.org/projects/carbon/carbon.xml">

    <!--
       Product Name
    -->
    <Name>WSO2 API Manager</Name>

    <!--
       Product Version
    -->
    <Version>1.8.0</Version>

    <ServerKey>AM</ServerKey>

    <!--
       Host name or IP address of the machine hosting this server
       e.g. www.wso2.org, 192.168.1.10
       This is will become part of the End Point Reference of the
       services deployed on this server instance.
    -->
    <!--HostName>www.wso2.org</HostName-->

    <!--
    Host name to be used for the Carbon management console
    -->
    <!--MgtHostName>mgt.wso2.org</MgtHostName-->

    <!--
        The URL of the back end server. This is where the admin services are hosted and
        will be used by the clients in the front end server.
        This is required only for the Front-end server. This is used when seperating BE server from FE server
       -->
    <ServerURL>local:/${carbon.context}/services/</ServerURL>
    <!--
    <ServerURL>https://${carbon.local.ip}:${carbon.management.port}${carbon.context}/services/</ServerURL>
    -->
     <!--
     The URL of the index page. This is where the user will be redirected after signing in to the
     carbon server.
     -->
    <!-- IndexPageURL>/carbon/admin/index.jsp</IndexPageURL-->

    <!--
    For cApp deployment, we have to identify the roles that can be acted by the current server.
    The following property is used for that purpose. Any number of roles can be defined here.
    Regular expressions can be used in the role.
    Ex : <Role>.*</Role> means this server can act any role
    -->
    <ServerRoles>
        <Role>APIManager</Role>
    </ServerRoles>


    <!-- uncommnet this line to subscribe to a bam instance automatically -->
    <!--<BamServerURL>https://bamhost:bamport/services/</BamServerURL>-->

    <!--
       The fully qualified name of the server
    -->
    <Package>org.wso2.carbon</Package>

    <!--
       Webapp context root of WSO2 Carbon.
    -->
    <WebContextRoot>/</WebContextRoot>

    <!-- In-order to  get the registry http Port from the back-end when the default http transport is not the same-->
    <!--RegistryHttpPort>9763</RegistryHttpPort-->

    <!--
    Number of items to be displayed on a management console page. This is used at the
    backend server for pagination of various items.
    -->
    <ItemsPerPage>15</ItemsPerPage>

    <!-- The endpoint URL of the cloud instance management Web service -->
    <!--<InstanceMgtWSEndpoint>https://ec2.amazonaws.com/</InstanceMgtWSEndpoint>-->

    <!--
       Ports used by this server
    -->
    <Ports>

        <!-- Ports offset. This entry will set the value of the ports defined below to
         the define value + Offset.
         e.g. Offset=2 and HTTPS port=9443 will set the effective HTTPS port to 9445
         -->
        <Offset>0</Offset>

        <!-- The JMX Ports -->
        <JMX>
            <!--The port RMI registry is exposed-->
            <RMIRegistryPort>9999</RMIRegistryPort>
            <!--The port RMI server should be exposed-->
            <RMIServerPort>11111</RMIServerPort>
        </JMX>

        <!-- Embedded LDAP server specific ports -->
        <EmbeddedLDAP>
            <!-- Port which embedded LDAP server runs -->
            <LDAPServerPort>10389</LDAPServerPort>
            <!-- Port which KDC (Kerberos Key Distribution Center) server runs -->
            <KDCServerPort>8000</KDCServerPort>
        </EmbeddedLDAP>

	    <!-- Embedded Qpid broker ports -->
        <EmbeddedQpid>
	    <!-- Broker TCP Port -->
            <BrokerPort>5672</BrokerPort>
	    <!-- SSL Port -->
            <BrokerSSLPort>8672</BrokerSSLPort>
        </EmbeddedQpid>

	<!--
             Override datasources JNDIproviderPort defined in bps.xml and datasources.properties files
	-->
	<!--<JNDIProviderPort>2199</JNDIProviderPort>-->
	<!--Override receive port of thrift based entitlement service.-->
	<ThriftEntitlementReceivePort>10500</ThriftEntitlementReceivePort>

    </Ports>

    <!--
        JNDI Configuration
    -->
    <JNDI>
		<!--
             If we use multiple usertsore with tenants, we might need to use following initialContextfactory implementation to do datasource lookup
		 -->
		<DefaultInitialContextFactory>org.wso2.carbon.tomcat.jndi.CarbonJavaURLContextFactory</DefaultInitialContextFactory>

        <!--
             The fully qualified name of the default initial context factory
        -->
		<!--<DefaultInitialContextFactory>org.apache.naming.java.javaURLContextFactory</DefaultInitialContextFactory>-->
        <!--
             The restrictions that are done to various JNDI Contexts in a Multi-tenant environment
        -->
        <Restrictions>
            <!--
                Contexts that will be available only to the super-tenant
            -->
            <!-- <SuperTenantOnly>
                <UrlContexts>
                    <UrlContext>
                        <Scheme>foo</Scheme>
                    </UrlContext>
                    <UrlContext>
                        <Scheme>bar</Scheme>
                    </UrlContext>
                </UrlContexts>
            </SuperTenantOnly> -->
            <!--
                Contexts that are common to all tenants
            -->
            <AllTenants>
                <UrlContexts>
                    <UrlContext>
                        <Scheme>java</Scheme>
                    </UrlContext>
                    <!-- <UrlContext>
                        <Scheme>foo</Scheme>
                    </UrlContext> -->
                </UrlContexts>
            </AllTenants>
            <!--
                 All other contexts not mentioned above will be available on a per-tenant basis
                 (i.e. will not be shared among tenants)
            -->
        </Restrictions>
    </JNDI>

    <!--
        Property to determine if the server is running an a cloud deployment environment.
        This property should only be used to determine deployment specific details that are
        applicable only in a cloud deployment, i.e when the server deployed *-as-a-service.
    -->
    <IsCloudDeployment>false</IsCloudDeployment>

    <!--
	Property to determine whether usage data should be collected for metering purposes
    -->
    <EnableMetering>false</EnableMetering>

    <!-- The Max time a thread should take for execution in seconds -->
    <MaxThreadExecutionTime>600</MaxThreadExecutionTime>

    <!--
        A flag to enable or disable Ghost Deployer. By default this is set to false. That is
        because the Ghost Deployer works only with the HTTP/S transports. If you are using
        other transports, don't enable Ghost Deployer.
    -->
    <EnableGhostDeployer>false</EnableGhostDeployer>

    <!--Enable/Disable POXSecurityHandler -->
    <EnablePoxSecurity>false</EnablePoxSecurity>

    <!--
    Axis2 related configurations
    -->
    <Axis2Config>
        <!--
             Location of the Axis2 Services & Modules repository

             This can be a directory in the local file system, or a URL.

             e.g.
             1. /home/wso2wsas/repository/ - An absolute path
             2. repository - In this case, the path is relative to CARBON_HOME
             3. file:///home/wso2wsas/repository/
             4. http://wso2wsas/repository/
        -->
        <RepositoryLocation>${carbon.home}/repository/deployment/server/</RepositoryLocation>

        <!--
         Deployment update interval in seconds. This is the interval between repository listener
         executions.
        -->
        <DeploymentUpdateInterval>15</DeploymentUpdateInterval>

        <!--
            Location of the main Axis2 configuration descriptor file, a.k.a. axis2.xml file

            This can be a file on the local file system, or a URL

            e.g.
            1. /home/repository/axis2.xml - An absolute path
            2. conf/axis2.xml - In this case, the path is relative to CARBON_HOME
            3. file:///home/carbon/repository/axis2.xml
            4. http://repository/conf/axis2.xml
        -->
        <ConfigurationFile>${carbon.home}/repository/conf/axis2/axis2.xml</ConfigurationFile>

        <!--
          ServiceGroupContextIdleTime, which will be set in ConfigurationContex
          for multiple clients which are going to access the same ServiceGroupContext
          Default Value is 30 Sec.
        -->
        <ServiceGroupContextIdleTime>30000</ServiceGroupContextIdleTime>

        <!--
          This repository location is used to crete the client side configuration
          context used by the server when calling admin services.
        -->
        <ClientRepositoryLocation>${carbon.home}/repository/deployment/client/</ClientRepositoryLocation>
        <!-- This axis2 xml is used in createing the configuration context by the FE server
         calling to BE server -->
        <clientAxis2XmlLocation>${carbon.home}/repository/conf/axis2/axis2_client.xml</clientAxis2XmlLocation>
        <!-- If this parameter is set, the ?wsdl on an admin service will not give the admin service wsdl. -->
        <HideAdminServiceWSDLs>true</HideAdminServiceWSDLs>

	<!--WARNING-Use With Care! Uncommenting bellow parameter would expose all AdminServices in HTTP transport.
	With HTTP transport your credentials and data routed in public channels are vulnerable for sniffing attacks.
	Use bellow parameter ONLY if your communication channels are confirmed to be secured by other means -->
        <!--HttpAdminServices>*</HttpAdminServices-->

    </Axis2Config>

    <!--
       The default user roles which will be created when the server
       is started up for the first time.
    -->
    <ServiceUserRoles>
        <Role>
            <Name>admin</Name>
            <Description>Default Administrator Role</Description>
        </Role>
        <Role>
            <Name>user</Name>
            <Description>Default User Role</Description>
        </Role>
    </ServiceUserRoles>

	<!--
      Enable following config to allow Emails as usernames.
    -->
    <EnableEmailUserName>true</EnableEmailUserName>

    <!--
      Security configurations
    -->
    <Security>
        <!--
            KeyStore which will be used for encrypting/decrypting passwords
            and other sensitive information.
        -->
        <KeyStore>
            <!-- Keystore file location-->
            <Location>${carbon.home}/repository/resources/security/wso2carbon.jks</Location>
            <!-- Keystore type (JKS/PKCS12 etc.)-->
            <Type>JKS</Type>
            <!-- Keystore password-->
            <Password>wso2carbon</Password>
            <!-- Private Key alias-->
            <KeyAlias>wso2carbon</KeyAlias>
            <!-- Private Key password-->
            <KeyPassword>wso2carbon</KeyPassword>
        </KeyStore>

		 <!--
			Encrypt Decrypt Store will be used for encrypting and decrypting
		-->
        <RegistryKeyStore>
            <!-- Keystore file location-->
            <Location>${carbon.home}/repository/resources/security/wso2carbon.jks</Location>
            <!-- Keystore type (JKS/PKCS12 etc.)-->
            <Type>JKS</Type>
            <!-- Keystore password-->
            <Password>wso2carbon</Password>
            <!-- Private Key alias-->
            <KeyAlias>wso2carbon</KeyAlias>
            <!-- Private Key password-->
            <KeyPassword>wso2carbon</KeyPassword>
        </RegistryKeyStore>

        <!--
            System wide trust-store which is used to maintain the certificates of all
            the trusted parties.
        -->
        <TrustStore>
            <!-- trust-store file location -->
            <Location>${carbon.home}/repository/resources/security/client-truststore.jks</Location>
            <!-- trust-store type (JKS/PKCS12 etc.) -->
            <Type>JKS</Type>
            <!-- trust-store password -->
            <Password>wso2carbon</Password>
        </TrustStore>

        <!--
            The Authenticator configuration to be used at the JVM level. We extend the
            java.net.Authenticator to make it possible to authenticate to given servers and
            proxies.
        -->
        <NetworkAuthenticatorConfig>
            <!--
                Below is a other configuration for a single authenticator. Please note that
                all child elements are mandatory. Not having some child elements would lead to
                exceptions at runtime.
            -->
            <!-- <Credential> -->
                <!--
                    the pattern that would match a subset of URLs for which this authenticator
                    would be used
                -->
                <!-- <Pattern>regularExpression</Pattern> -->
                <!--
                    the type of this authenticator. Allowed values are:
                    1. server
                    2. proxy
                -->
                <!-- <Type>proxy</Type> -->
                <!-- the username used to log in to server/proxy -->
                <!-- <Username>username</Username> -->
                <!-- the password used to log in to server/proxy -->
                <!-- <Password>password</Password> -->
            <!-- </Credential> -->
        </NetworkAuthenticatorConfig>

        <!--
         The Tomcat realm to be used for hosted Web applications. Allowed values are;
         1. UserManager
         2. Memory

         If this is set to 'UserManager', the realm will pick users & roles from the system's
         WSO2 User Manager. If it is set to 'memory', the realm will pick users & roles from
         CARBON_HOME/repository/conf/tomcat/tomcat-users.xml
        -->
        <TomcatRealm>UserManager</TomcatRealm>

	<!--Option to disable storing of tokens issued by STS-->
	<DisableTokenStore>false</DisableTokenStore>
	<!--
	Token Persister configuration for non-volatile storage of SAML tokens issued by STS:
	1. TokenPersister class
	2. TokenStorage path
	3. Maximum number of tokens in volatile storage
	4. Any other custom properties
	-->
	<TokenPersister>
		<Class>org.apache.rahas.impl.FSBasedRetiredTokenPersister</Class>
		<StoragePath>${carbon.home}/repository/resources/security/tokenstore</StoragePath>
		<InMemoryThreshold>500</InMemoryThreshold>
		<!--Properties>
			<Property>
				<Name>propName</Name>
				<Value>propValue</Value>
			</Property>
		</Properties-->
	</TokenPersister>
    </Security>

    <!--
       The temporary work directory
    -->
    <WorkDirectory>${carbon.home}/tmp/work</WorkDirectory>

    <!--
       House-keeping configuration
    -->
    <HouseKeeping>

        <!--
           true  - Start House-keeping thread on server startup
           false - Do not start House-keeping thread on server startup.
                   The user will run it manually as and when he wishes.
        -->
        <AutoStart>true</AutoStart>

        <!--
           The interval in *minutes*, between house-keeping runs
        -->
        <Interval>10</Interval>

        <!--
          The maximum time in *minutes*, temp files are allowed to live
          in the system. Files/directories which were modified more than
          "MaxTempFileLifetime" minutes ago will be removed by the
          house-keeping task
        -->
        <MaxTempFileLifetime>30</MaxTempFileLifetime>
    </HouseKeeping>

    <!--
       Configuration for handling different types of file upload & other file uploading related
       config parameters.
       To map all actions to a particular FileUploadExecutor, use
       <Action>*</Action>
    -->
    <FileUploadConfig>
        <!--
           The total file upload size limit in MB
        -->
        <TotalFileSizeLimit>100</TotalFileSizeLimit>

        <Mapping>
            <Actions>
                <Action>keystore</Action>
                <Action>certificate</Action>
                <Action>*</Action>
            </Actions>
            <Class>org.wso2.carbon.ui.transports.fileupload.AnyFileUploadExecutor</Class>
        </Mapping>

        <Mapping>
            <Actions>
                <Action>jarZip</Action>
            </Actions>
            <Class>org.wso2.carbon.ui.transports.fileupload.JarZipUploadExecutor</Class>
        </Mapping>
        <Mapping>
            <Actions>
                <Action>dbs</Action>
            </Actions>
            <Class>org.wso2.carbon.ui.transports.fileupload.DBSFileUploadExecutor</Class>
        </Mapping>
        <Mapping>
            <Actions>
                <Action>tools</Action>
            </Actions>
            <Class>org.wso2.carbon.ui.transports.fileupload.ToolsFileUploadExecutor</Class>
        </Mapping>
        <Mapping>
            <Actions>
                <Action>toolsAny</Action>
            </Actions>
            <Class>org.wso2.carbon.ui.transports.fileupload.ToolsAnyFileUploadExecutor</Class>
        </Mapping>
    </FileUploadConfig>

    <!--
       Processors which process special HTTP GET requests such as ?wsdl, ?policy etc.

       In order to plug in a processor to handle a special request, simply add an entry to this
       section.

       The value of the Item element is the first parameter in the query string(e.g. ?wsdl)
       which needs special processing

       The value of the Class element is a class which implements
       org.wso2.carbon.transport.HttpGetRequestProcessor
    -->
    <HttpGetRequestProcessors>
        <Processor>
            <Item>info</Item>
            <Class>org.wso2.carbon.core.transports.util.InfoProcessor</Class>
        </Processor>
        <Processor>
            <Item>wsdl</Item>
            <Class>org.wso2.carbon.core.transports.util.Wsdl11Processor</Class>
        </Processor>
        <Processor>
            <Item>wsdl2</Item>
            <Class>org.wso2.carbon.core.transports.util.Wsdl20Processor</Class>
        </Processor>
        <Processor>
            <Item>xsd</Item>
            <Class>org.wso2.carbon.core.transports.util.XsdProcessor</Class>
        </Processor>
    </HttpGetRequestProcessors>

    <!-- Deployment Synchronizer Configuration. Uncomment the following section when running with "svn based" dep sync.
	In master nodes you need to set both AutoCommit and AutoCheckout to true
	and in  worker nodes set only AutoCheckout to true.
    -->
    <!--<DeploymentSynchronizer>
        <Enabled>true</Enabled>
        <AutoCommit>false</AutoCommit>
        <AutoCheckout>true</AutoCheckout>
        <RepositoryType>svn</RepositoryType>
        <SvnUrl>http://svnrepo.example.com/repos/</SvnUrl>
        <SvnUser>username</SvnUser>
        <SvnPassword>password</SvnPassword>
        <SvnUrlAppendTenantId>true</SvnUrlAppendTenantId>
    </DeploymentSynchronizer>-->

    <!-- Deployment Synchronizer Configuration. Uncomment the following section when running with "registry based" dep sync.
        In master nodes you need to set both AutoCommit and AutoCheckout to true
        and in  worker nodes set only AutoCheckout to true.
    -->
    <!--<DeploymentSynchronizer>
        <Enabled>true</Enabled>
        <AutoCommit>false</AutoCommit>
        <AutoCheckout>true</AutoCheckout>
    </DeploymentSynchronizer>-->

    <!-- Mediation persistence configurations. Only valid if mediation features are available i.e. ESB -->
    <!--<MediationConfig>
        <LoadFromRegistry>false</LoadFromRegistry>
        <SaveToFile>false</SaveToFile>
        <Persistence>enabled</Persistence>
        <RegistryPersistence>enabled</RegistryPersistence>
    </MediationConfig>-->

    <!--
    Server intializing code, specified as implementation classes of org.wso2.carbon.core.ServerInitializer.
    This code will be run when the Carbon server is initialized
    -->
    <ServerInitializers>
        <!--<Initializer></Initializer>-->
    </ServerInitializers>

    <!--
    Indicates whether the Carbon Servlet is required by the system, and whether it should be
    registered
    -->
    <RequireCarbonServlet>${require.carbon.servlet}</RequireCarbonServlet>

    <!--
    Carbon H2 OSGI Configuration
    By default non of the servers start.
        name="web" - Start the web server with the H2 Console
        name="webPort" - The port (default: 8082)
        name="webAllowOthers" - Allow other computers to connect
        name="webSSL" - Use encrypted (HTTPS) connections
        name="tcp" - Start the TCP server
        name="tcpPort" - The port (default: 9092)
        name="tcpAllowOthers" - Allow other computers to connect
        name="tcpSSL" - Use encrypted (SSL) connections
        name="pg" - Start the PG server
        name="pgPort"  - The port (default: 5435)
        name="pgAllowOthers"  - Allow other computers to connect
        name="trace" - Print additional trace information; for all servers
        name="baseDir" - The base directory for H2 databases; for all servers
    -->
    <!--H2DatabaseConfiguration>
        <property name="web" />
        <property name="webPort">8082</property>
        <property name="webAllowOthers" />
        <property name="webSSL" />
        <property name="tcp" />
        <property name="tcpPort">9092</property>
        <property name="tcpAllowOthers" />
        <property name="tcpSSL" />
        <property name="pg" />
        <property name="pgPort">5435</property>
        <property name="pgAllowOthers" />
        <property name="trace" />
        <property name="baseDir">${carbon.home}</property>
    </H2DatabaseConfiguration-->
    <!--Disabling statistics reporter by default-->
    <StatisticsReporterDisabled>true</StatisticsReporterDisabled>

    <!-- Enable accessing Admin Console via HTTP -->
    <!-- EnableHTTPAdminConsole>true</EnableHTTPAdminConsole -->

    <!--
       Default Feature Repository of WSO2 Carbon.
    -->
    <FeatureRepository>
	<RepositoryName>default repository</RepositoryName>
	<RepositoryURL>${p2.repo.url}</RepositoryURL>
    </FeatureRepository>

    <!--
	Configure API Management
   -->
   <APIManagement>

	<!--Uses the embedded API Manager by default. If you want to use an external
	API Manager instance to manage APIs, configure below  externalAPIManager-->

	<Enabled>false</Enabled>

	<!--Uncomment and configure API Gateway and
	Publisher URLs to use external API Manager instance-->

	<!--ExternalAPIManager>

		<APIGatewayURL>http://localhost:8281</APIGatewayURL>
		<APIPublisherURL>http://localhost:8281/publisher</APIPublisherURL>

	</ExternalAPIManager-->

	<LoadAPIContextsInServerStartup>true</LoadAPIContextsInServerStartup>
   </APIManagement>
</Server>
