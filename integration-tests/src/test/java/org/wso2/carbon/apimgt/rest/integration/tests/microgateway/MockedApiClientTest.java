/*
 * WSO2 API Manager - Publisher API
 * This specifies a **RESTful API** for WSO2 **API Manager** - Publisher.  Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.0.4/components/apimgt/org.wso2.carbon.apimgt.rest.api.publisher/src/main/resources/publisher-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.
 *
 * OpenAPI spec version: 0.10.0
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.wso2.carbon.apimgt.rest.integration.tests.microgateway;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import org.testng.Assert;

import org.testng.annotations.Test;

public class MockedApiClientTest {
    private final MockedApiClient mockedApiClient = new MockedApiClient();
    String validContext = "api";
    String invalidContext = "mockyApi";
    String validApiKey = "122456";
    String invalidApiKey = "111111";

//    @Test(enabled = true)
//    public void apisGetTest() {
//
//        //Assert.assertEquals(response, "\"abc\": \"This is a test\"", "API name mismatch");
//    }

    @Test
    public void validAPIkeyValidContextTest() {
        try {
            String response = mockedApiClient.get(validApiKey, validContext);
            Assert.assertEquals(response, "{ \"abc\": \"This is a test\" }", "Mocked api content");
        } catch (NoSuchAlgorithmException e) {
            //log.error("Failed to initialize SSL handling.", e);
        } catch (KeyManagementException e) {
            //log.error("Failed to initialize SSL handling.", e);
        }
    }

    @Test
    public void invalidAPIkeyValidContextTest() {
        try {
            String response = mockedApiClient.get(invalidApiKey, validContext);
            Assert.assertEquals(response, "{\"code\":900903,\"message\":\"subscription not found\"}",
                    "Error Message for invalid api_key");
        } catch (NoSuchAlgorithmException e) {
                //log.error("Failed to initialize SSL handling.", e);
        } catch (KeyManagementException e) {
                //log.error("Failed to initialize SSL handling.", e);
        }
    }

    @Test
    public void validAPIkeyInvalidContextTest() {
        try {
            String response = mockedApiClient.get(validApiKey, invalidContext);
            Assert.assertEquals(response, "no matching service found for path : /mockyApi",
                    "Error message for invalid context");
        } catch (NoSuchAlgorithmException e) {
            //log.error("Failed to initialize SSL handling.", e);
        } catch (KeyManagementException e) {
            //log.error("Failed to initialize SSL handling.", e);
        }
    }

    @Test
    public void invalidAPIkeyInvalidContextTest() {
        try {
            String response = mockedApiClient.get(invalidApiKey, invalidContext);
            Assert.assertEquals(response, "no matching service found for path : /mockyApi",
                    "Error message for invalid context");
        } catch (NoSuchAlgorithmException e) {
            //log.error("Failed to initialize SSL handling.", e);
        } catch (KeyManagementException e) {
            //log.error("Failed to initialize SSL handling.", e);
        }
    }

}
