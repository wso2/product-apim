<!--
 ~ Copyright (c) 2025, WSO2 LLC (http://www.wso2.org) All Rights Reserved.
 ~
 ~ WSO2 LLC licenses this file to you under the Apache License,
 ~ Version 2.0 (the "License"); you may not use this file except
 ~ in compliance with the License.
 ~ You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~ Unless required by applicable law or agreed to in writing,
 ~ software distributed under the License is distributed on an
 ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~ KIND, either express or implied.  See the License for the
 ~ specific language governing permissions and limitations
 ~ under the License.
 -->

        #####################  Define the macros ######################

        #macro ( print_string_if_exist $field $default)
        #if($field && "$field" !="")
        "$field"
        #else
        "$default"
        #end
        #end

        #macro ( draw_endpoint $type $endpoint_config $endpoint_security)

        ## IF endpoint secured
        #if($endpoint.endpointSecurityEnabled)
<class name="org.wso2.carbon.apimgt.gateway.mediators.ApiKeyMediator">
    <property name="apiKeyIdentifier" value="${endpoint.apiKeyIdentifier}" type="STRING"/>
    <property name="apiKeyIdentifierType" value="${endpoint.apiKeyIdentifierType}" type="STRING"/>
    <property name="apiKeyValue" value="${endpoint.apiKeyValue}" type="STRING"/>
</class>
        #end

        #if( $endpoint && $endpoint.endpointUuid )
        #set( $ep_key = "${endpointKey}_API_LLMEndpoint_${endpoint.endpointUuid}" )
        #else
        #set( $ep_key = "${endpointKey}_API${type}Endpoint")
        #end

<call>
<endpoint xmlns="http://ws.apache.org/ns/synapse" key="$ep_key"/>
</call>
<loopback/>
        #end

        ######################## End of Macros ######################################


<api xmlns="http://ws.apache.org/ns/synapse"  name="$!apiName" context="$!apiContext" version="$!apiVersion" transports="$!transport" version-type="context">
#if($apiIsBlocked)
## if API is blocked send the API Block message
<resource methods="GET POST PUT DELETE PATCH" url-mapping="/*" faultSequence=#print_string_if_exist($faultSequence "fault")>
<inSequence>
    <payloadFactory>
        <format>
            <am:fault xmlns:am="http://wso2.org/apimanager">
                <am:code>700700</am:code>
                <am:message>API blocked</am:message>
                <am:description>This API has been blocked temporarily. Please try again later or contact the system administrators.</am:description>
            </am:fault>
        </format>
    </payloadFactory>
    <property name="HTTP_SC" value="503" scope="axis2"/>
    <property name="RESPONSE" value="true"/>
    <property name="NO_ENTITY_BODY" scope="axis2" action="remove"/>
    <header name="To" action="remove"/>
    <send/>
</inSequence>
</resource>
        #else
        ## api not blocked
        #set ($resourceNo = 0)
        #foreach($aggregate in $aggregates)
        #set($resource = $aggregate.getUriTemplate())
        #set($apiId = $aggregate.getApiId())
        #set($endpointSecurity = $endpoint_security.get("${apiId}"))

<resource xmlns="http://ws.apache.org/ns/synapse"
        #if($resource.getUriTemplate().contains("{") ||
        ($resource.getUriTemplate().contains("*") && !$resource.getUriTemplate().endsWith("/*")))
        uri-template="$util.escapeXml($resource.getUriTemplate())"
        #else
        url-mapping="$resource.getUriTemplate()"
        #end
        methods="$resource.getMethodsAsString()" faultSequence=#print_string_if_exist($aggregate.getFaultSequenceName() "fault")>
<inSequence>

#if(!$aggregate.getInSequenceName().isEmpty())
<sequence key="$aggregate.getInSequenceName()"/>
#end

<property name="api.ut.backendRequestTime" expression="get-property('SYSTEM_TIME')"/>

##############  define the filter based on environment type production only, sandbox only , hybrid ############

#set ($endpoint_json = $aggregate.getEndpointConfigAsJSON())
#set ($endpointKey = $aggregate.getEndpointKey())

#if(($environmentType == 'sandbox') || ($environmentType =='hybrid' && !$endpoint_json.get("production_endpoints") ))
#set( $filterRegex = "SANDBOX" )
#else
#set( $filterRegex = "PRODUCTION" )
#end
#if($apiStatus != 'PROTOTYPED' && ($apiIsOauthProtected || $apiIsApiKeyProtected || $apiIsBasicAuthProtected))
<filter source="$ctx:AM_KEY_TYPE" regex="$filterRegex">
    <then>
        #end
        #if( ($environmentType == 'sandbox') || ($environmentType == 'hybrid' && !$defaultProductionEndpoint)) )
        #if( $defaultSandboxEndpoint )
        <switch source="get-property('targetEndpoint')">
            #foreach( $endpoint in $!sandboxEndpoints )
            <case regex="$endpoint.endpointUuid">
                #draw_endpoint("sandbox", $endpoint)
            </case>
            #end
            <case regex="DEFAULT">
                #draw_endpoint("sandbox", $defaultSandboxEndpoint)
            </case>
        </switch>
        #end
        #else
        #if( $defaultProductionEndpoint )
        <switch source="get-property('targetEndpoint')">
            #foreach( $endpoint in $!productionEndpoints )
            <case regex="$endpoint.endpointUuid">
                #draw_endpoint("production", $endpoint)
            </case>
            #end
            <case regex="DEFAULT">
                #draw_endpoint("production", $defaultProductionEndpoint)
            </case>
        </switch>
        #end
        #end
        #if($apiStatus != 'PROTOTYPED' && ($apiIsOauthProtected || $apiIsApiKeyProtected || $apiIsBasicAuthProtected))
    </then>
    <else>
        #if($environmentType !='hybrid')
        <payloadFactory>
            <format>
                <error xmlns="">
                    #if($environmentType == 'production')
                    <message>Sandbox Key Provided for Production Gateway</message>
                    #elseif($environmentType == 'sandbox')
                    <message>Production Key Provided for Sandbox Gateway</message>
                    #end
                </error>
            </format>
        </payloadFactory>
        <property name="ContentType" value="application/xml" scope="axis2"/>
        <property name="RESPONSE" value="true"/>
        <header name="To" action="remove"/>
        <property name="HTTP_SC" value="401" scope="axis2"/>
        <property name="NO_ENTITY_BODY" scope="axis2" action="remove"/>
        <send/>
        #else
        #if($endpoint_json.get("production_endpoints") && $endpoint_json.get("sandbox_endpoints"))
        #if( $defaultSandboxEndpoint && $defaultProductionEndpoint )
        <switch source="get-property('targetEndpoint')">
            #foreach( $endpoint in $!sandboxEndpoints )
            <case regex="$endpoint.endpointUuid">
                #draw_endpoint("sandbox", $endpoint)
            </case>
            #end
            <case regex="DEFAULT">
                #draw_endpoint("sandbox", $defaultSandboxEndpoint)
            </case>>
        </switch>
        #elseif($endpoint_json.get("production_endpoints"))
        <sequence key="_sandbox_key_error_"/>
        #elseif($endpoint_json.get("sandbox_endpoints"))
        <sequence key="_production_key_error_"/>
        #end
        #end
    </else>
</filter>
#end
</inSequence>
<outSequence>
#if($isSoapToRestMode)
#foreach($uri in $out_sequences.get("$resource.getUriTemplate()").keySet())
$out_sequences.get("$resource.getUriTemplate()").get($uri)
#end
#end
#if(!$aggregate.getOutSequenceName().isEmpty())
<sequence key="$aggregate.getOutSequenceName()"/>
#end
<send/>
</outSequence>
        </resource>
        #set ($resourceNo = $resourceNo + 1)
        #end  ## end of resource iterator
        ## print the handlers
        #if($handlers.size() > 0)
<handlers xmlns="http://ws.apache.org/ns/synapse">
#foreach($handler in $handlers)
<handler xmlns="http://ws.apache.org/ns/synapse" class="$handler.className">
    #if($handler.hasProperties())
    #set ($map = $handler.getProperties() )
    #foreach($property in $map.entrySet())
    <property name="$!property.key" value="$!property.value"/>
    #end
    #end
</handler>
#end
## check and set enable schema validation
#if($enableSchemaValidation)
<handler class="org.wso2.carbon.apimgt.gateway.handlers.security.SchemaValidator"/>
#end
</handlers>
        #end
        #end
        #if($apiStatus == 'PROTOTYPED')
        #end
        ## end of apiIsBlocked check
<handlers>
<handler class="org.wso2.carbon.apimgt.gateway.handlers.security.CORSRequestHandler">
    <property name="inline" value="INLINE"/>
</handler>
</handlers>
        </api>
