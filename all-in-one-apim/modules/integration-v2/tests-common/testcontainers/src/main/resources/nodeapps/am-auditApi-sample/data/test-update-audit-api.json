{
  "desc": {
    "id": "03530124-cfc3-470d-8640-65cc6a05ec6f",
    "cid": "",
    "name": "SwaggerPetstoreExtended",
    "specfile": ""
  },
  "assessment": null,
  "scan": null,
  "protection": null
}
